//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxMaterial : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) : base(physxPINVOKE.PxMaterial_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxMaterial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override void release() {
    physxPINVOKE.PxMaterial_release(swigCPtr);
  }

  public virtual SWIGTYPE_p_uint32_t getReferenceCount() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxMaterial_getReferenceCount(swigCPtr), true);
    return ret;
  }

  public virtual void acquireReference() {
    physxPINVOKE.PxMaterial_acquireReference(swigCPtr);
  }

  public virtual void setDynamicFriction(float coef) {
    physxPINVOKE.PxMaterial_setDynamicFriction(swigCPtr, coef);
  }

  public virtual float getDynamicFriction() {
    float ret = physxPINVOKE.PxMaterial_getDynamicFriction(swigCPtr);
    return ret;
  }

  public virtual void setStaticFriction(float coef) {
    physxPINVOKE.PxMaterial_setStaticFriction(swigCPtr, coef);
  }

  public virtual float getStaticFriction() {
    float ret = physxPINVOKE.PxMaterial_getStaticFriction(swigCPtr);
    return ret;
  }

  public virtual void setRestitution(float rest) {
    physxPINVOKE.PxMaterial_setRestitution(swigCPtr, rest);
  }

  public virtual float getRestitution() {
    float ret = physxPINVOKE.PxMaterial_getRestitution(swigCPtr);
    return ret;
  }

  public virtual void setFlag(PxMaterialFlag.Enum flag, bool arg1) {
    physxPINVOKE.PxMaterial_setFlag(swigCPtr, (int)flag, arg1);
  }

  public virtual void setFlags(SWIGTYPE_p_physx__PxFlagsT_physx__PxMaterialFlag__Enum_uint16_t_t inFlags) {
    physxPINVOKE.PxMaterial_setFlags(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxMaterialFlag__Enum_uint16_t_t.getCPtr(inFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_physx__PxFlagsT_physx__PxMaterialFlag__Enum_uint16_t_t getFlags() {
    SWIGTYPE_p_physx__PxFlagsT_physx__PxMaterialFlag__Enum_uint16_t_t ret = new SWIGTYPE_p_physx__PxFlagsT_physx__PxMaterialFlag__Enum_uint16_t_t(physxPINVOKE.PxMaterial_getFlags(swigCPtr), true);
    return ret;
  }

  public virtual void setFrictionCombineMode(PxCombineMode.Enum combMode) {
    physxPINVOKE.PxMaterial_setFrictionCombineMode(swigCPtr, (int)combMode);
  }

  public virtual PxCombineMode.Enum getFrictionCombineMode() {
    PxCombineMode.Enum ret = (PxCombineMode.Enum)physxPINVOKE.PxMaterial_getFrictionCombineMode(swigCPtr);
    return ret;
  }

  public virtual void setRestitutionCombineMode(PxCombineMode.Enum combMode) {
    physxPINVOKE.PxMaterial_setRestitutionCombineMode(swigCPtr, (int)combMode);
  }

  public virtual PxCombineMode.Enum getRestitutionCombineMode() {
    PxCombineMode.Enum ret = (PxCombineMode.Enum)physxPINVOKE.PxMaterial_getRestitutionCombineMode(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_void userData {
    set {
      physxPINVOKE.PxMaterial_userData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxMaterial_userData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public override string getConcreteTypeName() {
    string ret = physxPINVOKE.PxMaterial_getConcreteTypeName(swigCPtr);
    return ret;
  }

}

}
