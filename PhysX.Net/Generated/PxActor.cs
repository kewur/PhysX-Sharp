//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxActor : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxActor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(physxPINVOKE.PxActor_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxActor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override void release() {
    physxPINVOKE.PxActor_release(swigCPtr);
  }

  public virtual PxActorType.Enum getType() {
    PxActorType.Enum ret = (PxActorType.Enum)physxPINVOKE.PxActor_getType(swigCPtr);
    return ret;
  }

  public virtual PxScene getScene() {
    global::System.IntPtr cPtr = physxPINVOKE.PxActor_getScene(swigCPtr);
    PxScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxScene(cPtr, false);
    return ret;
  }

  public virtual void setName(string name) {
    physxPINVOKE.PxActor_setName(swigCPtr, name);
  }

  public virtual string getName() {
    string ret = physxPINVOKE.PxActor_getName(swigCPtr);
    return ret;
  }

  public virtual PxBounds3 getWorldBounds(float inflation) {
    PxBounds3 ret = new PxBounds3(physxPINVOKE.PxActor_getWorldBounds__SWIG_0(swigCPtr, inflation), true);
    return ret;
  }

  public virtual PxBounds3 getWorldBounds() {
    PxBounds3 ret = new PxBounds3(physxPINVOKE.PxActor_getWorldBounds__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual void setActorFlag(PxActorFlag.Enum flag, bool value) {
    physxPINVOKE.PxActor_setActorFlag(swigCPtr, (int)flag, value);
  }

  public virtual void setActorFlags(SWIGTYPE_p_physx__PxFlagsT_physx__PxActorFlag__Enum_uint8_t_t inFlags) {
    physxPINVOKE.PxActor_setActorFlags(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxActorFlag__Enum_uint8_t_t.getCPtr(inFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_physx__PxFlagsT_physx__PxActorFlag__Enum_uint8_t_t getActorFlags() {
    SWIGTYPE_p_physx__PxFlagsT_physx__PxActorFlag__Enum_uint8_t_t ret = new SWIGTYPE_p_physx__PxFlagsT_physx__PxActorFlag__Enum_uint8_t_t(physxPINVOKE.PxActor_getActorFlags(swigCPtr), true);
    return ret;
  }

  public virtual void setDominanceGroup(SWIGTYPE_p_uint8_t dominanceGroup) {
    physxPINVOKE.PxActor_setDominanceGroup(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(dominanceGroup));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint8_t getDominanceGroup() {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(physxPINVOKE.PxActor_getDominanceGroup(swigCPtr), true);
    return ret;
  }

  public virtual void setOwnerClient(SWIGTYPE_p_uint8_t inClient) {
    physxPINVOKE.PxActor_setOwnerClient(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(inClient));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint8_t getOwnerClient() {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(physxPINVOKE.PxActor_getOwnerClient(swigCPtr), true);
    return ret;
  }

  public virtual void setClientBehaviorFlags(SWIGTYPE_p_physx__PxFlagsT_physx__PxActorClientBehaviorFlag__Enum_uint8_t_t arg0) {
    physxPINVOKE.PxActor_setClientBehaviorFlags(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxActorClientBehaviorFlag__Enum_uint8_t_t.getCPtr(arg0));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_physx__PxFlagsT_physx__PxActorClientBehaviorFlag__Enum_uint8_t_t getClientBehaviorFlags() {
    SWIGTYPE_p_physx__PxFlagsT_physx__PxActorClientBehaviorFlag__Enum_uint8_t_t ret = new SWIGTYPE_p_physx__PxFlagsT_physx__PxActorClientBehaviorFlag__Enum_uint8_t_t(physxPINVOKE.PxActor_getClientBehaviorFlags(swigCPtr), true);
    return ret;
  }

  public virtual PxAggregate getAggregate() {
    global::System.IntPtr cPtr = physxPINVOKE.PxActor_getAggregate(swigCPtr);
    PxAggregate ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxAggregate(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void userData {
    set {
      physxPINVOKE.PxActor_userData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxActor_userData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

}

}
