//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxArticulation : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxArticulation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(physxPINVOKE.PxArticulation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxArticulation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override void release() {
    physxPINVOKE.PxArticulation_release(swigCPtr);
  }

  public virtual PxScene getScene() {
    global::System.IntPtr cPtr = physxPINVOKE.PxArticulation_getScene(swigCPtr);
    PxScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxScene(cPtr, false);
    return ret;
  }

  public virtual void setMaxProjectionIterations(SWIGTYPE_p_uint32_t iterations) {
    physxPINVOKE.PxArticulation_setMaxProjectionIterations(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(iterations));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getMaxProjectionIterations() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxArticulation_getMaxProjectionIterations(swigCPtr), true);
    return ret;
  }

  public virtual void setSeparationTolerance(float tolerance) {
    physxPINVOKE.PxArticulation_setSeparationTolerance(swigCPtr, tolerance);
  }

  public virtual float getSeparationTolerance() {
    float ret = physxPINVOKE.PxArticulation_getSeparationTolerance(swigCPtr);
    return ret;
  }

  public virtual void setInternalDriveIterations(SWIGTYPE_p_uint32_t iterations) {
    physxPINVOKE.PxArticulation_setInternalDriveIterations(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(iterations));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getInternalDriveIterations() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxArticulation_getInternalDriveIterations(swigCPtr), true);
    return ret;
  }

  public virtual void setExternalDriveIterations(SWIGTYPE_p_uint32_t iterations) {
    physxPINVOKE.PxArticulation_setExternalDriveIterations(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(iterations));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getExternalDriveIterations() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxArticulation_getExternalDriveIterations(swigCPtr), true);
    return ret;
  }

  public virtual void setSolverIterationCounts(SWIGTYPE_p_uint32_t minPositionIters, SWIGTYPE_p_uint32_t minVelocityIters) {
    physxPINVOKE.PxArticulation_setSolverIterationCounts__SWIG_0(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(minPositionIters), SWIGTYPE_p_uint32_t.getCPtr(minVelocityIters));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setSolverIterationCounts(SWIGTYPE_p_uint32_t minPositionIters) {
    physxPINVOKE.PxArticulation_setSolverIterationCounts__SWIG_1(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(minPositionIters));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getSolverIterationCounts(SWIGTYPE_p_uint32_t minPositionIters, SWIGTYPE_p_uint32_t minVelocityIters) {
    physxPINVOKE.PxArticulation_getSolverIterationCounts(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(minPositionIters), SWIGTYPE_p_uint32_t.getCPtr(minVelocityIters));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isSleeping() {
    bool ret = physxPINVOKE.PxArticulation_isSleeping(swigCPtr);
    return ret;
  }

  public virtual void setSleepThreshold(float threshold) {
    physxPINVOKE.PxArticulation_setSleepThreshold(swigCPtr, threshold);
  }

  public virtual float getSleepThreshold() {
    float ret = physxPINVOKE.PxArticulation_getSleepThreshold(swigCPtr);
    return ret;
  }

  public virtual void setStabilizationThreshold(float threshold) {
    physxPINVOKE.PxArticulation_setStabilizationThreshold(swigCPtr, threshold);
  }

  public virtual float getStabilizationThreshold() {
    float ret = physxPINVOKE.PxArticulation_getStabilizationThreshold(swigCPtr);
    return ret;
  }

  public virtual void setWakeCounter(float wakeCounterValue) {
    physxPINVOKE.PxArticulation_setWakeCounter(swigCPtr, wakeCounterValue);
  }

  public virtual float getWakeCounter() {
    float ret = physxPINVOKE.PxArticulation_getWakeCounter(swigCPtr);
    return ret;
  }

  public virtual void wakeUp() {
    physxPINVOKE.PxArticulation_wakeUp(swigCPtr);
  }

  public virtual void putToSleep() {
    physxPINVOKE.PxArticulation_putToSleep(swigCPtr);
  }

  public virtual PxArticulationLink createLink(PxArticulationLink parent, PxTransform pose) {
    global::System.IntPtr cPtr = physxPINVOKE.PxArticulation_createLink(swigCPtr, PxArticulationLink.getCPtr(parent), PxTransform.getCPtr(pose));
    PxArticulationLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxArticulationLink(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbLinks() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxArticulation_getNbLinks(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getLinks(SWIGTYPE_p_p_physx__PxArticulationLink userBuffer, SWIGTYPE_p_uint32_t bufferSize, SWIGTYPE_p_uint32_t startIndex) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxArticulation_getLinks__SWIG_0(swigCPtr, SWIGTYPE_p_p_physx__PxArticulationLink.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize), SWIGTYPE_p_uint32_t.getCPtr(startIndex)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getLinks(SWIGTYPE_p_p_physx__PxArticulationLink userBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxArticulation_getLinks__SWIG_1(swigCPtr, SWIGTYPE_p_p_physx__PxArticulationLink.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setName(string name) {
    physxPINVOKE.PxArticulation_setName(swigCPtr, name);
  }

  public virtual string getName() {
    string ret = physxPINVOKE.PxArticulation_getName(swigCPtr);
    return ret;
  }

  public virtual PxBounds3 getWorldBounds(float inflation) {
    PxBounds3 ret = new PxBounds3(physxPINVOKE.PxArticulation_getWorldBounds__SWIG_0(swigCPtr, inflation), true);
    return ret;
  }

  public virtual PxBounds3 getWorldBounds() {
    PxBounds3 ret = new PxBounds3(physxPINVOKE.PxArticulation_getWorldBounds__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual PxAggregate getAggregate() {
    global::System.IntPtr cPtr = physxPINVOKE.PxArticulation_getAggregate(swigCPtr);
    PxAggregate ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxAggregate(cPtr, false);
    return ret;
  }

  public virtual PxArticulationDriveCache createDriveCache(float compliance, SWIGTYPE_p_uint32_t driveIterations) {
    global::System.IntPtr cPtr = physxPINVOKE.PxArticulation_createDriveCache(swigCPtr, compliance, SWIGTYPE_p_uint32_t.getCPtr(driveIterations));
    PxArticulationDriveCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxArticulationDriveCache(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void updateDriveCache(PxArticulationDriveCache driveCache, float compliance, SWIGTYPE_p_uint32_t driveIterations) {
    physxPINVOKE.PxArticulation_updateDriveCache(swigCPtr, PxArticulationDriveCache.getCPtr(driveCache), compliance, SWIGTYPE_p_uint32_t.getCPtr(driveIterations));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void releaseDriveCache(PxArticulationDriveCache driveCache) {
    physxPINVOKE.PxArticulation_releaseDriveCache(swigCPtr, PxArticulationDriveCache.getCPtr(driveCache));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void applyImpulse(PxArticulationLink link, PxArticulationDriveCache driveCache, PxVec3 linearImpulse, PxVec3 angularImpulse) {
    physxPINVOKE.PxArticulation_applyImpulse(swigCPtr, PxArticulationLink.getCPtr(link), PxArticulationDriveCache.getCPtr(driveCache), PxVec3.getCPtr(linearImpulse), PxVec3.getCPtr(angularImpulse));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void computeImpulseResponse(PxArticulationLink link, PxVec3 linearResponse, PxVec3 angularResponse, PxArticulationDriveCache driveCache, PxVec3 linearImpulse, PxVec3 angularImpulse) {
    physxPINVOKE.PxArticulation_computeImpulseResponse(swigCPtr, PxArticulationLink.getCPtr(link), PxVec3.getCPtr(linearResponse), PxVec3.getCPtr(angularResponse), PxArticulationDriveCache.getCPtr(driveCache), PxVec3.getCPtr(linearImpulse), PxVec3.getCPtr(angularImpulse));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_void userData {
    set {
      physxPINVOKE.PxArticulation_userData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxArticulation_userData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public override string getConcreteTypeName() {
    string ret = physxPINVOKE.PxArticulation_getConcreteTypeName(swigCPtr);
    return ret;
  }

}

}
