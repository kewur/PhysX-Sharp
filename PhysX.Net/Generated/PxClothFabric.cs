//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxClothFabric : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxClothFabric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(physxPINVOKE.PxClothFabric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxClothFabric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override void release() {
    physxPINVOKE.PxClothFabric_release(swigCPtr);
  }

  public virtual SWIGTYPE_p_uint32_t getNbParticles() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getNbParticles(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbPhases() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getNbPhases(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbRestvalues() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getNbRestvalues(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbSets() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getNbSets(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbParticleIndices() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getNbParticleIndices(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbTethers() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getNbTethers(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getPhases(PxClothFabricPhase userPhaseBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getPhases(swigCPtr, PxClothFabricPhase.getCPtr(userPhaseBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getSets(SWIGTYPE_p_uint32_t userSetBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getSets(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(userSetBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getParticleIndices(SWIGTYPE_p_uint32_t userParticleIndexBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getParticleIndices(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(userParticleIndexBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getRestvalues(SWIGTYPE_p_float userRestvalueBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getRestvalues(swigCPtr, SWIGTYPE_p_float.getCPtr(userRestvalueBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getTetherAnchors(SWIGTYPE_p_uint32_t userAnchorBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getTetherAnchors(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(userAnchorBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getTetherLengths(SWIGTYPE_p_float userLengthBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getTetherLengths(swigCPtr, SWIGTYPE_p_float.getCPtr(userLengthBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void scaleRestlengths(float scale) {
    physxPINVOKE.PxClothFabric_scaleRestlengths(swigCPtr, scale);
  }

  public virtual SWIGTYPE_p_uint32_t getReferenceCount() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxClothFabric_getReferenceCount(swigCPtr), true);
    return ret;
  }

  public virtual void acquireReference() {
    physxPINVOKE.PxClothFabric_acquireReference(swigCPtr);
  }

  public override string getConcreteTypeName() {
    string ret = physxPINVOKE.PxClothFabric_getConcreteTypeName(swigCPtr);
    return ret;
  }

}

}
