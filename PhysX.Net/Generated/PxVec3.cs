//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxVec3 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxVec3(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVec3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxVec3() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          physxPINVOKE.delete_PxVec3(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxVec3() : this(physxPINVOKE.new_PxVec3__SWIG_0(), true) {
  }

  public PxVec3(PxZERO r) : this(physxPINVOKE.new_PxVec3__SWIG_1((int)r), true) {
  }

  public PxVec3(float a) : this(physxPINVOKE.new_PxVec3__SWIG_2(a), true) {
  }

  public PxVec3(float nx, float ny, float nz) : this(physxPINVOKE.new_PxVec3__SWIG_3(nx, ny, nz), true) {
  }

  public PxVec3(PxVec3 v) : this(physxPINVOKE.new_PxVec3__SWIG_4(PxVec3.getCPtr(v)), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isZero() {
    bool ret = physxPINVOKE.PxVec3_isZero(swigCPtr);
    return ret;
  }

  public bool isFinite() {
    bool ret = physxPINVOKE.PxVec3_isFinite(swigCPtr);
    return ret;
  }

  public bool isNormalized() {
    bool ret = physxPINVOKE.PxVec3_isNormalized(swigCPtr);
    return ret;
  }

  public float magnitudeSquared() {
    float ret = physxPINVOKE.PxVec3_magnitudeSquared(swigCPtr);
    return ret;
  }

  public float magnitude() {
    float ret = physxPINVOKE.PxVec3_magnitude(swigCPtr);
    return ret;
  }

  public float dot(PxVec3 v) {
    float ret = physxPINVOKE.PxVec3_dot(swigCPtr, PxVec3.getCPtr(v));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVec3 cross(PxVec3 v) {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxVec3_cross(swigCPtr, PxVec3.getCPtr(v)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVec3 getNormalized() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxVec3_getNormalized(swigCPtr), true);
    return ret;
  }

  public float normalize() {
    float ret = physxPINVOKE.PxVec3_normalize(swigCPtr);
    return ret;
  }

  public float normalizeSafe() {
    float ret = physxPINVOKE.PxVec3_normalizeSafe(swigCPtr);
    return ret;
  }

  public float normalizeFast() {
    float ret = physxPINVOKE.PxVec3_normalizeFast(swigCPtr);
    return ret;
  }

  public PxVec3 multiply(PxVec3 a) {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxVec3_multiply(swigCPtr, PxVec3.getCPtr(a)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVec3 minimum(PxVec3 v) {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxVec3_minimum(swigCPtr, PxVec3.getCPtr(v)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float minElement() {
    float ret = physxPINVOKE.PxVec3_minElement(swigCPtr);
    return ret;
  }

  public PxVec3 maximum(PxVec3 v) {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxVec3_maximum(swigCPtr, PxVec3.getCPtr(v)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float maxElement() {
    float ret = physxPINVOKE.PxVec3_maxElement(swigCPtr);
    return ret;
  }

  public PxVec3 abs() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxVec3_abs(swigCPtr), true);
    return ret;
  }

  public float x {
    set {
      physxPINVOKE.PxVec3_x_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxVec3_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      physxPINVOKE.PxVec3_y_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxVec3_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      physxPINVOKE.PxVec3_z_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxVec3_z_get(swigCPtr);
      return ret;
    } 
  }

}

}
