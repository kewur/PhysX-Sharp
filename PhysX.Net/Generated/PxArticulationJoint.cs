//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxArticulationJoint : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxArticulationJoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(physxPINVOKE.PxArticulationJoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxArticulationJoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void setParentPose(PxTransform pose) {
    physxPINVOKE.PxArticulationJoint_setParentPose(swigCPtr, PxTransform.getCPtr(pose));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxTransform getParentPose() {
    PxTransform ret = new PxTransform(physxPINVOKE.PxArticulationJoint_getParentPose(swigCPtr), true);
    return ret;
  }

  public virtual void setChildPose(PxTransform pose) {
    physxPINVOKE.PxArticulationJoint_setChildPose(swigCPtr, PxTransform.getCPtr(pose));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxTransform getChildPose() {
    PxTransform ret = new PxTransform(physxPINVOKE.PxArticulationJoint_getChildPose(swigCPtr), true);
    return ret;
  }

  public virtual void setTargetOrientation(PxQuat orientation) {
    physxPINVOKE.PxArticulationJoint_setTargetOrientation(swigCPtr, PxQuat.getCPtr(orientation));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxQuat getTargetOrientation() {
    PxQuat ret = new PxQuat(physxPINVOKE.PxArticulationJoint_getTargetOrientation(swigCPtr), true);
    return ret;
  }

  public virtual void setTargetVelocity(PxVec3 velocity) {
    physxPINVOKE.PxArticulationJoint_setTargetVelocity(swigCPtr, PxVec3.getCPtr(velocity));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxVec3 getTargetVelocity() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxArticulationJoint_getTargetVelocity(swigCPtr), true);
    return ret;
  }

  public virtual void setDriveType(PxArticulationJointDriveType.Enum driveType) {
    physxPINVOKE.PxArticulationJoint_setDriveType(swigCPtr, (int)driveType);
  }

  public virtual PxArticulationJointDriveType.Enum getDriveType() {
    PxArticulationJointDriveType.Enum ret = (PxArticulationJointDriveType.Enum)physxPINVOKE.PxArticulationJoint_getDriveType(swigCPtr);
    return ret;
  }

  public virtual void setStiffness(float spring) {
    physxPINVOKE.PxArticulationJoint_setStiffness(swigCPtr, spring);
  }

  public virtual float getStiffness() {
    float ret = physxPINVOKE.PxArticulationJoint_getStiffness(swigCPtr);
    return ret;
  }

  public virtual void setDamping(float damping) {
    physxPINVOKE.PxArticulationJoint_setDamping(swigCPtr, damping);
  }

  public virtual float getDamping() {
    float ret = physxPINVOKE.PxArticulationJoint_getDamping(swigCPtr);
    return ret;
  }

  public virtual void setInternalCompliance(float compliance) {
    physxPINVOKE.PxArticulationJoint_setInternalCompliance(swigCPtr, compliance);
  }

  public virtual float getInternalCompliance() {
    float ret = physxPINVOKE.PxArticulationJoint_getInternalCompliance(swigCPtr);
    return ret;
  }

  public virtual void setExternalCompliance(float compliance) {
    physxPINVOKE.PxArticulationJoint_setExternalCompliance(swigCPtr, compliance);
  }

  public virtual float getExternalCompliance() {
    float ret = physxPINVOKE.PxArticulationJoint_getExternalCompliance(swigCPtr);
    return ret;
  }

  public virtual void setSwingLimit(float zLimit, float yLimit) {
    physxPINVOKE.PxArticulationJoint_setSwingLimit(swigCPtr, zLimit, yLimit);
  }

  public virtual void getSwingLimit(SWIGTYPE_p_float zLimit, SWIGTYPE_p_float yLimit) {
    physxPINVOKE.PxArticulationJoint_getSwingLimit(swigCPtr, SWIGTYPE_p_float.getCPtr(zLimit), SWIGTYPE_p_float.getCPtr(yLimit));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setTangentialStiffness(float spring) {
    physxPINVOKE.PxArticulationJoint_setTangentialStiffness(swigCPtr, spring);
  }

  public virtual float getTangentialStiffness() {
    float ret = physxPINVOKE.PxArticulationJoint_getTangentialStiffness(swigCPtr);
    return ret;
  }

  public virtual void setTangentialDamping(float damping) {
    physxPINVOKE.PxArticulationJoint_setTangentialDamping(swigCPtr, damping);
  }

  public virtual float getTangentialDamping() {
    float ret = physxPINVOKE.PxArticulationJoint_getTangentialDamping(swigCPtr);
    return ret;
  }

  public virtual void setSwingLimitContactDistance(float contactDistance) {
    physxPINVOKE.PxArticulationJoint_setSwingLimitContactDistance(swigCPtr, contactDistance);
  }

  public virtual float getSwingLimitContactDistance() {
    float ret = physxPINVOKE.PxArticulationJoint_getSwingLimitContactDistance(swigCPtr);
    return ret;
  }

  public virtual void setSwingLimitEnabled(bool enabled) {
    physxPINVOKE.PxArticulationJoint_setSwingLimitEnabled(swigCPtr, enabled);
  }

  public virtual bool getSwingLimitEnabled() {
    bool ret = physxPINVOKE.PxArticulationJoint_getSwingLimitEnabled(swigCPtr);
    return ret;
  }

  public virtual void setTwistLimit(float lower, float upper) {
    physxPINVOKE.PxArticulationJoint_setTwistLimit(swigCPtr, lower, upper);
  }

  public virtual void getTwistLimit(SWIGTYPE_p_float lower, SWIGTYPE_p_float upper) {
    physxPINVOKE.PxArticulationJoint_getTwistLimit(swigCPtr, SWIGTYPE_p_float.getCPtr(lower), SWIGTYPE_p_float.getCPtr(upper));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setTwistLimitEnabled(bool enabled) {
    physxPINVOKE.PxArticulationJoint_setTwistLimitEnabled(swigCPtr, enabled);
  }

  public virtual bool getTwistLimitEnabled() {
    bool ret = physxPINVOKE.PxArticulationJoint_getTwistLimitEnabled(swigCPtr);
    return ret;
  }

  public virtual void setTwistLimitContactDistance(float contactDistance) {
    physxPINVOKE.PxArticulationJoint_setTwistLimitContactDistance(swigCPtr, contactDistance);
  }

  public virtual float getTwistLimitContactDistance() {
    float ret = physxPINVOKE.PxArticulationJoint_getTwistLimitContactDistance(swigCPtr);
    return ret;
  }

  public override string getConcreteTypeName() {
    string ret = physxPINVOKE.PxArticulationJoint_getConcreteTypeName(swigCPtr);
    return ret;
  }

}

}
