//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxQuat : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxQuat(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxQuat obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxQuat() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          physxPINVOKE.delete_PxQuat(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxQuat() : this(physxPINVOKE.new_PxQuat__SWIG_0(), true) {
  }

  public PxQuat(PxIDENTITY r) : this(physxPINVOKE.new_PxQuat__SWIG_1((int)r), true) {
  }

  public PxQuat(float r) : this(physxPINVOKE.new_PxQuat__SWIG_2(r), true) {
  }

  public PxQuat(float nx, float ny, float nz, float nw) : this(physxPINVOKE.new_PxQuat__SWIG_3(nx, ny, nz, nw), true) {
  }

  public PxQuat(float angleRadians, PxVec3 unitAxis) : this(physxPINVOKE.new_PxQuat__SWIG_4(angleRadians, PxVec3.getCPtr(unitAxis)), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public PxQuat(PxQuat v) : this(physxPINVOKE.new_PxQuat__SWIG_5(PxQuat.getCPtr(v)), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public PxQuat(PxMat33 m) : this(physxPINVOKE.new_PxQuat__SWIG_6(PxMat33.getCPtr(m)), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isIdentity() {
    bool ret = physxPINVOKE.PxQuat_isIdentity(swigCPtr);
    return ret;
  }

  public bool isFinite() {
    bool ret = physxPINVOKE.PxQuat_isFinite(swigCPtr);
    return ret;
  }

  public bool isUnit() {
    bool ret = physxPINVOKE.PxQuat_isUnit(swigCPtr);
    return ret;
  }

  public bool isSane() {
    bool ret = physxPINVOKE.PxQuat_isSane(swigCPtr);
    return ret;
  }

  public void toRadiansAndUnitAxis(SWIGTYPE_p_float angle, PxVec3 axis) {
    physxPINVOKE.PxQuat_toRadiansAndUnitAxis(swigCPtr, SWIGTYPE_p_float.getCPtr(angle), PxVec3.getCPtr(axis));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getAngle() {
    float ret = physxPINVOKE.PxQuat_getAngle__SWIG_0(swigCPtr);
    return ret;
  }

  public float getAngle(PxQuat q) {
    float ret = physxPINVOKE.PxQuat_getAngle__SWIG_1(swigCPtr, PxQuat.getCPtr(q));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float magnitudeSquared() {
    float ret = physxPINVOKE.PxQuat_magnitudeSquared(swigCPtr);
    return ret;
  }

  public float dot(PxQuat v) {
    float ret = physxPINVOKE.PxQuat_dot(swigCPtr, PxQuat.getCPtr(v));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxQuat getNormalized() {
    PxQuat ret = new PxQuat(physxPINVOKE.PxQuat_getNormalized(swigCPtr), true);
    return ret;
  }

  public float magnitude() {
    float ret = physxPINVOKE.PxQuat_magnitude(swigCPtr);
    return ret;
  }

  public float normalize() {
    float ret = physxPINVOKE.PxQuat_normalize(swigCPtr);
    return ret;
  }

  public PxQuat getConjugate() {
    PxQuat ret = new PxQuat(physxPINVOKE.PxQuat_getConjugate(swigCPtr), true);
    return ret;
  }

  public PxVec3 getImaginaryPart() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxQuat_getImaginaryPart(swigCPtr), true);
    return ret;
  }

  public PxVec3 getBasisVector0() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxQuat_getBasisVector0(swigCPtr), true);
    return ret;
  }

  public PxVec3 getBasisVector1() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxQuat_getBasisVector1(swigCPtr), true);
    return ret;
  }

  public PxVec3 getBasisVector2() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxQuat_getBasisVector2(swigCPtr), true);
    return ret;
  }

  public PxVec3 rotate(PxVec3 v) {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxQuat_rotate(swigCPtr, PxVec3.getCPtr(v)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVec3 rotateInv(PxVec3 v) {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxQuat_rotateInv(swigCPtr, PxVec3.getCPtr(v)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float x {
    set {
      physxPINVOKE.PxQuat_x_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxQuat_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      physxPINVOKE.PxQuat_y_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxQuat_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      physxPINVOKE.PxQuat_z_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxQuat_z_get(swigCPtr);
      return ret;
    } 
  }

  public float w {
    set {
      physxPINVOKE.PxQuat_w_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxQuat_w_get(swigCPtr);
      return ret;
    } 
  }

}

}
