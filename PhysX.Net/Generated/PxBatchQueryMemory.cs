//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxBatchQueryMemory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxBatchQueryMemory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxBatchQueryMemory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxBatchQueryMemory() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          physxPINVOKE.delete_PxBatchQueryMemory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxRaycastHit_t userRaycastResultBuffer {
    set {
      physxPINVOKE.PxBatchQueryMemory_userRaycastResultBuffer_set(swigCPtr, SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxRaycastHit_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxBatchQueryMemory_userRaycastResultBuffer_get(swigCPtr);
      SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxRaycastHit_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxRaycastHit_t(cPtr, false);
      return ret;
    } 
  }

  public PxRaycastHit userRaycastTouchBuffer {
    set {
      physxPINVOKE.PxBatchQueryMemory_userRaycastTouchBuffer_set(swigCPtr, PxRaycastHit.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxBatchQueryMemory_userRaycastTouchBuffer_get(swigCPtr);
      PxRaycastHit ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxRaycastHit(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxSweepHit_t userSweepResultBuffer {
    set {
      physxPINVOKE.PxBatchQueryMemory_userSweepResultBuffer_set(swigCPtr, SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxSweepHit_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxBatchQueryMemory_userSweepResultBuffer_get(swigCPtr);
      SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxSweepHit_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxSweepHit_t(cPtr, false);
      return ret;
    } 
  }

  public PxSweepHit userSweepTouchBuffer {
    set {
      physxPINVOKE.PxBatchQueryMemory_userSweepTouchBuffer_set(swigCPtr, PxSweepHit.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxBatchQueryMemory_userSweepTouchBuffer_get(swigCPtr);
      PxSweepHit ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSweepHit(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxOverlapHit_t userOverlapResultBuffer {
    set {
      physxPINVOKE.PxBatchQueryMemory_userOverlapResultBuffer_set(swigCPtr, SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxOverlapHit_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxBatchQueryMemory_userOverlapResultBuffer_get(swigCPtr);
      SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxOverlapHit_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxBatchQueryResultT_physx__PxOverlapHit_t(cPtr, false);
      return ret;
    } 
  }

  public PxOverlapHit userOverlapTouchBuffer {
    set {
      physxPINVOKE.PxBatchQueryMemory_userOverlapTouchBuffer_set(swigCPtr, PxOverlapHit.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxBatchQueryMemory_userOverlapTouchBuffer_get(swigCPtr);
      PxOverlapHit ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxOverlapHit(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t raycastTouchBufferSize {
    set {
      physxPINVOKE.PxBatchQueryMemory_raycastTouchBufferSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxBatchQueryMemory_raycastTouchBufferSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t sweepTouchBufferSize {
    set {
      physxPINVOKE.PxBatchQueryMemory_sweepTouchBufferSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxBatchQueryMemory_sweepTouchBufferSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t overlapTouchBufferSize {
    set {
      physxPINVOKE.PxBatchQueryMemory_overlapTouchBufferSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxBatchQueryMemory_overlapTouchBufferSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t getMaxRaycastsPerExecute() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxBatchQueryMemory_getMaxRaycastsPerExecute(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t getMaxSweepsPerExecute() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxBatchQueryMemory_getMaxSweepsPerExecute(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t getMaxOverlapsPerExecute() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxBatchQueryMemory_getMaxOverlapsPerExecute(swigCPtr), true);
    return ret;
  }

  public PxBatchQueryMemory(SWIGTYPE_p_uint32_t raycastResultBufferSize_, SWIGTYPE_p_uint32_t sweepResultBufferSize_, SWIGTYPE_p_uint32_t overlapResultBufferSize_) : this(physxPINVOKE.new_PxBatchQueryMemory(SWIGTYPE_p_uint32_t.getCPtr(raycastResultBufferSize_), SWIGTYPE_p_uint32_t.getCPtr(sweepResultBufferSize_), SWIGTYPE_p_uint32_t.getCPtr(overlapResultBufferSize_)), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
