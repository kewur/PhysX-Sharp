//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxRigidActor : PxActor {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxRigidActor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(physxPINVOKE.PxRigidActor_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxRigidActor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override void release() {
    physxPINVOKE.PxRigidActor_release(swigCPtr);
  }

  public virtual PxTransform getGlobalPose() {
    PxTransform ret = new PxTransform(physxPINVOKE.PxRigidActor_getGlobalPose(swigCPtr), true);
    return ret;
  }

  public virtual void setGlobalPose(PxTransform pose, bool autowake) {
    physxPINVOKE.PxRigidActor_setGlobalPose__SWIG_0(swigCPtr, PxTransform.getCPtr(pose), autowake);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setGlobalPose(PxTransform pose) {
    physxPINVOKE.PxRigidActor_setGlobalPose__SWIG_1(swigCPtr, PxTransform.getCPtr(pose));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxShape createShape(PxGeometry geometry, SWIGTYPE_p_p_physx__PxMaterial materials, SWIGTYPE_p_uint16_t materialCount, SWIGTYPE_p_physx__PxFlagsT_physx__PxShapeFlag__Enum_uint8_t_t shapeFlags) {
    global::System.IntPtr cPtr = physxPINVOKE.PxRigidActor_createShape__SWIG_0(swigCPtr, PxGeometry.getCPtr(geometry), SWIGTYPE_p_p_physx__PxMaterial.getCPtr(materials), SWIGTYPE_p_uint16_t.getCPtr(materialCount), SWIGTYPE_p_physx__PxFlagsT_physx__PxShapeFlag__Enum_uint8_t_t.getCPtr(shapeFlags));
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxShape(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxShape createShape(PxGeometry geometry, SWIGTYPE_p_p_physx__PxMaterial materials, SWIGTYPE_p_uint16_t materialCount) {
    global::System.IntPtr cPtr = physxPINVOKE.PxRigidActor_createShape__SWIG_1(swigCPtr, PxGeometry.getCPtr(geometry), SWIGTYPE_p_p_physx__PxMaterial.getCPtr(materials), SWIGTYPE_p_uint16_t.getCPtr(materialCount));
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxShape(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createShape(PxGeometry geometry, PxMaterial material, SWIGTYPE_p_physx__PxFlagsT_physx__PxShapeFlag__Enum_uint8_t_t shapeFlags) {
    global::System.IntPtr cPtr = physxPINVOKE.PxRigidActor_createShape__SWIG_2(swigCPtr, PxGeometry.getCPtr(geometry), PxMaterial.getCPtr(material), SWIGTYPE_p_physx__PxFlagsT_physx__PxShapeFlag__Enum_uint8_t_t.getCPtr(shapeFlags));
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxShape(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createShape(PxGeometry geometry, PxMaterial material) {
    global::System.IntPtr cPtr = physxPINVOKE.PxRigidActor_createShape__SWIG_3(swigCPtr, PxGeometry.getCPtr(geometry), PxMaterial.getCPtr(material));
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxShape(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void attachShape(PxShape shape) {
    physxPINVOKE.PxRigidActor_attachShape(swigCPtr, PxShape.getCPtr(shape));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void detachShape(PxShape shape, bool wakeOnLostTouch) {
    physxPINVOKE.PxRigidActor_detachShape__SWIG_0(swigCPtr, PxShape.getCPtr(shape), wakeOnLostTouch);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void detachShape(PxShape shape) {
    physxPINVOKE.PxRigidActor_detachShape__SWIG_1(swigCPtr, PxShape.getCPtr(shape));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getNbShapes() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxRigidActor_getNbShapes(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getShapes(SWIGTYPE_p_p_physx__PxShape userBuffer, SWIGTYPE_p_uint32_t bufferSize, SWIGTYPE_p_uint32_t startIndex) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxRigidActor_getShapes__SWIG_0(swigCPtr, SWIGTYPE_p_p_physx__PxShape.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize), SWIGTYPE_p_uint32_t.getCPtr(startIndex)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getShapes(SWIGTYPE_p_p_physx__PxShape userBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxRigidActor_getShapes__SWIG_1(swigCPtr, SWIGTYPE_p_p_physx__PxShape.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbConstraints() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxRigidActor_getNbConstraints(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getConstraints(SWIGTYPE_p_p_physx__PxConstraint userBuffer, SWIGTYPE_p_uint32_t bufferSize, SWIGTYPE_p_uint32_t startIndex) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxRigidActor_getConstraints__SWIG_0(swigCPtr, SWIGTYPE_p_p_physx__PxConstraint.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize), SWIGTYPE_p_uint32_t.getCPtr(startIndex)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getConstraints(SWIGTYPE_p_p_physx__PxConstraint userBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxRigidActor_getConstraints__SWIG_1(swigCPtr, SWIGTYPE_p_p_physx__PxConstraint.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
