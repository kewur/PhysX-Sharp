//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxBroadPhaseRegionInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxBroadPhaseRegionInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxBroadPhaseRegionInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxBroadPhaseRegionInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          physxPINVOKE.delete_PxBroadPhaseRegionInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxBroadPhaseRegion region {
    set {
      physxPINVOKE.PxBroadPhaseRegionInfo_region_set(swigCPtr, PxBroadPhaseRegion.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxBroadPhaseRegionInfo_region_get(swigCPtr);
      PxBroadPhaseRegion ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxBroadPhaseRegion(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbStaticObjects {
    set {
      physxPINVOKE.PxBroadPhaseRegionInfo_nbStaticObjects_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxBroadPhaseRegionInfo_nbStaticObjects_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbDynamicObjects {
    set {
      physxPINVOKE.PxBroadPhaseRegionInfo_nbDynamicObjects_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxBroadPhaseRegionInfo_nbDynamicObjects_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool active {
    set {
      physxPINVOKE.PxBroadPhaseRegionInfo_active_set(swigCPtr, value);
    } 
    get {
      bool ret = physxPINVOKE.PxBroadPhaseRegionInfo_active_get(swigCPtr);
      return ret;
    } 
  }

  public bool overlap {
    set {
      physxPINVOKE.PxBroadPhaseRegionInfo_overlap_set(swigCPtr, value);
    } 
    get {
      bool ret = physxPINVOKE.PxBroadPhaseRegionInfo_overlap_get(swigCPtr);
      return ret;
    } 
  }

  public PxBroadPhaseRegionInfo() : this(physxPINVOKE.new_PxBroadPhaseRegionInfo(), true) {
  }

}

}
