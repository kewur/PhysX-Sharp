//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxRigidDynamic : PxRigidBody {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxRigidDynamic(global::System.IntPtr cPtr, bool cMemoryOwn) : base(physxPINVOKE.PxRigidDynamic_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxRigidDynamic obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void setKinematicTarget(PxTransform destination) {
    physxPINVOKE.PxRigidDynamic_setKinematicTarget(swigCPtr, PxTransform.getCPtr(destination));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getKinematicTarget(PxTransform target) {
    bool ret = physxPINVOKE.PxRigidDynamic_getKinematicTarget(swigCPtr, PxTransform.getCPtr(target));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setLinearDamping(float linDamp) {
    physxPINVOKE.PxRigidDynamic_setLinearDamping(swigCPtr, linDamp);
  }

  public virtual float getLinearDamping() {
    float ret = physxPINVOKE.PxRigidDynamic_getLinearDamping(swigCPtr);
    return ret;
  }

  public virtual void setAngularDamping(float angDamp) {
    physxPINVOKE.PxRigidDynamic_setAngularDamping(swigCPtr, angDamp);
  }

  public virtual float getAngularDamping() {
    float ret = physxPINVOKE.PxRigidDynamic_getAngularDamping(swigCPtr);
    return ret;
  }

  public virtual void setMaxAngularVelocity(float maxAngVel) {
    physxPINVOKE.PxRigidDynamic_setMaxAngularVelocity(swigCPtr, maxAngVel);
  }

  public virtual float getMaxAngularVelocity() {
    float ret = physxPINVOKE.PxRigidDynamic_getMaxAngularVelocity(swigCPtr);
    return ret;
  }

  public virtual bool isSleeping() {
    bool ret = physxPINVOKE.PxRigidDynamic_isSleeping(swigCPtr);
    return ret;
  }

  public virtual void setSleepThreshold(float threshold) {
    physxPINVOKE.PxRigidDynamic_setSleepThreshold(swigCPtr, threshold);
  }

  public virtual float getSleepThreshold() {
    float ret = physxPINVOKE.PxRigidDynamic_getSleepThreshold(swigCPtr);
    return ret;
  }

  public virtual void setStabilizationThreshold(float threshold) {
    physxPINVOKE.PxRigidDynamic_setStabilizationThreshold(swigCPtr, threshold);
  }

  public virtual float getStabilizationThreshold() {
    float ret = physxPINVOKE.PxRigidDynamic_getStabilizationThreshold(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidDynamicLockFlag__Enum_uint16_t_t getRigidDynamicLockFlags() {
    SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidDynamicLockFlag__Enum_uint16_t_t ret = new SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidDynamicLockFlag__Enum_uint16_t_t(physxPINVOKE.PxRigidDynamic_getRigidDynamicLockFlags(swigCPtr), true);
    return ret;
  }

  public virtual void setRigidDynamicLockFlag(PxRigidDynamicLockFlag.Enum flag, bool value) {
    physxPINVOKE.PxRigidDynamic_setRigidDynamicLockFlag(swigCPtr, (int)flag, value);
  }

  public virtual void setRigidDynamicLockFlags(SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidDynamicLockFlag__Enum_uint16_t_t flags) {
    physxPINVOKE.PxRigidDynamic_setRigidDynamicLockFlags(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidDynamicLockFlag__Enum_uint16_t_t.getCPtr(flags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setWakeCounter(float wakeCounterValue) {
    physxPINVOKE.PxRigidDynamic_setWakeCounter(swigCPtr, wakeCounterValue);
  }

  public virtual float getWakeCounter() {
    float ret = physxPINVOKE.PxRigidDynamic_getWakeCounter(swigCPtr);
    return ret;
  }

  public virtual void wakeUp() {
    physxPINVOKE.PxRigidDynamic_wakeUp(swigCPtr);
  }

  public virtual void putToSleep() {
    physxPINVOKE.PxRigidDynamic_putToSleep(swigCPtr);
  }

  public virtual void setSolverIterationCounts(SWIGTYPE_p_uint32_t minPositionIters, SWIGTYPE_p_uint32_t minVelocityIters) {
    physxPINVOKE.PxRigidDynamic_setSolverIterationCounts__SWIG_0(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(minPositionIters), SWIGTYPE_p_uint32_t.getCPtr(minVelocityIters));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setSolverIterationCounts(SWIGTYPE_p_uint32_t minPositionIters) {
    physxPINVOKE.PxRigidDynamic_setSolverIterationCounts__SWIG_1(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(minPositionIters));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getSolverIterationCounts(SWIGTYPE_p_uint32_t minPositionIters, SWIGTYPE_p_uint32_t minVelocityIters) {
    physxPINVOKE.PxRigidDynamic_getSolverIterationCounts(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(minPositionIters), SWIGTYPE_p_uint32_t.getCPtr(minVelocityIters));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getContactReportThreshold() {
    float ret = physxPINVOKE.PxRigidDynamic_getContactReportThreshold(swigCPtr);
    return ret;
  }

  public virtual void setContactReportThreshold(float threshold) {
    physxPINVOKE.PxRigidDynamic_setContactReportThreshold(swigCPtr, threshold);
  }

  public override string getConcreteTypeName() {
    string ret = physxPINVOKE.PxRigidDynamic_getConcreteTypeName(swigCPtr);
    return ret;
  }

}

}
