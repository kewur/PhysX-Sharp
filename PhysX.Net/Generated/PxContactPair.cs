//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxContactPair : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxContactPair(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxContactPair obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxContactPair() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          physxPINVOKE.delete_PxContactPair(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxContactPair() : this(physxPINVOKE.new_PxContactPair(), true) {
  }

  public SWIGTYPE_p_p_physx__PxShape shapes {
    set {
      physxPINVOKE.PxContactPair_shapes_set(swigCPtr, SWIGTYPE_p_p_physx__PxShape.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactPair_shapes_get(swigCPtr);
      SWIGTYPE_p_p_physx__PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_physx__PxShape(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t contactPatches {
    set {
      physxPINVOKE.PxContactPair_contactPatches_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactPair_contactPatches_get(swigCPtr);
      SWIGTYPE_p_uint8_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint8_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t contactPoints {
    set {
      physxPINVOKE.PxContactPair_contactPoints_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactPair_contactPoints_get(swigCPtr);
      SWIGTYPE_p_uint8_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint8_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float contactImpulses {
    set {
      physxPINVOKE.PxContactPair_contactImpulses_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactPair_contactImpulses_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t requiredBufferSize {
    set {
      physxPINVOKE.PxContactPair_requiredBufferSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactPair_requiredBufferSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t contactCount {
    set {
      physxPINVOKE.PxContactPair_contactCount_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(physxPINVOKE.PxContactPair_contactCount_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t patchCount {
    set {
      physxPINVOKE.PxContactPair_patchCount_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(physxPINVOKE.PxContactPair_patchCount_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint16_t contactStreamSize {
    set {
      physxPINVOKE.PxContactPair_contactStreamSize_set(swigCPtr, SWIGTYPE_p_uint16_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint16_t ret = new SWIGTYPE_p_uint16_t(physxPINVOKE.PxContactPair_contactStreamSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_physx__PxFlagsT_physx__PxContactPairFlag__Enum_uint16_t_t flags {
    set {
      physxPINVOKE.PxContactPair_flags_set(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxContactPairFlag__Enum_uint16_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactPair_flags_get(swigCPtr);
      SWIGTYPE_p_physx__PxFlagsT_physx__PxContactPairFlag__Enum_uint16_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxFlagsT_physx__PxContactPairFlag__Enum_uint16_t_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_physx__PxFlagsT_physx__PxPairFlag__Enum_uint16_t_t events {
    set {
      physxPINVOKE.PxContactPair_events_set(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxPairFlag__Enum_uint16_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactPair_events_get(swigCPtr);
      SWIGTYPE_p_physx__PxFlagsT_physx__PxPairFlag__Enum_uint16_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxFlagsT_physx__PxPairFlag__Enum_uint16_t_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t internalData {
    set {
      physxPINVOKE.PxContactPair_internalData_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactPair_internalData_get(swigCPtr);
      SWIGTYPE_p_uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint32_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t extractContacts(PxContactPairPoint userBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactPair_extractContacts(swigCPtr, PxContactPairPoint.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void bufferContacts(PxContactPair newPair, SWIGTYPE_p_uint8_t bufferMemory) {
    physxPINVOKE.PxContactPair_bufferContacts(swigCPtr, PxContactPair.getCPtr(newPair), SWIGTYPE_p_uint8_t.getCPtr(bufferMemory));
  }

  public SWIGTYPE_p_uint32_t getInternalFaceIndices() {
    global::System.IntPtr cPtr = physxPINVOKE.PxContactPair_getInternalFaceIndices(swigCPtr);
    SWIGTYPE_p_uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint32_t(cPtr, false);
    return ret;
  }

}

}
