//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxVolumeCache : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxVolumeCache(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxVolumeCache obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class Iterator : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Iterator(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Iterator obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            throw new global::System.MethodAccessException("C++ destructor does not have public access");
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public virtual void processShapes(SWIGTYPE_p_uint32_t count, PxActorShape actorShapePairs) {
      physxPINVOKE.PxVolumeCache_Iterator_processShapes(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(count), PxActorShape.getCPtr(actorShapePairs));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void finalizeQuery() {
      physxPINVOKE.PxVolumeCache_Iterator_finalizeQuery(swigCPtr);
    }
  
  }

  public virtual PxVolumeCache.FillStatus fill(PxGeometry cacheVolume, PxTransform pose) {
    PxVolumeCache.FillStatus ret = (PxVolumeCache.FillStatus)physxPINVOKE.PxVolumeCache_fill(swigCPtr, PxGeometry.getCPtr(cacheVolume), PxTransform.getCPtr(pose));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isValid() {
    bool ret = physxPINVOKE.PxVolumeCache_isValid(swigCPtr);
    return ret;
  }

  public virtual void invalidate() {
    physxPINVOKE.PxVolumeCache_invalidate(swigCPtr);
  }

  public virtual bool getCacheVolume(PxGeometryHolder resultVolume, PxTransform resultPose) {
    bool ret = physxPINVOKE.PxVolumeCache_getCacheVolume(swigCPtr, PxGeometryHolder.getCPtr(resultVolume), PxTransform.getCPtr(resultPose));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_int32_t getNbCachedShapes() {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(physxPINVOKE.PxVolumeCache_getNbCachedShapes(swigCPtr), true);
    return ret;
  }

  public virtual void release() {
    physxPINVOKE.PxVolumeCache_release(swigCPtr);
  }

  public virtual void forEach(PxVolumeCache.Iterator iter) {
    physxPINVOKE.PxVolumeCache_forEach(swigCPtr, PxVolumeCache.Iterator.getCPtr(iter));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMaxNbStaticShapes(SWIGTYPE_p_uint32_t maxCount) {
    physxPINVOKE.PxVolumeCache_setMaxNbStaticShapes(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(maxCount));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMaxNbDynamicShapes(SWIGTYPE_p_uint32_t maxCount) {
    physxPINVOKE.PxVolumeCache_setMaxNbDynamicShapes(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(maxCount));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getMaxNbStaticShapes() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxVolumeCache_getMaxNbStaticShapes(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getMaxNbDynamicShapes() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxVolumeCache_getMaxNbDynamicShapes(swigCPtr), true);
    return ret;
  }

  public virtual bool raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, PxQueryFilterCallback filterCall) {
    bool ret = physxPINVOKE.PxVolumeCache_raycast__SWIG_0(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData) {
    bool ret = physxPINVOKE.PxVolumeCache_raycast__SWIG_1(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags) {
    bool ret = physxPINVOKE.PxVolumeCache_raycast__SWIG_2(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t hitCall) {
    bool ret = physxPINVOKE.PxVolumeCache_raycast__SWIG_3(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t.getCPtr(hitCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, PxQueryFilterCallback filterCall, float inflation) {
    bool ret = physxPINVOKE.PxVolumeCache_sweep__SWIG_0(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall), inflation);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, PxQueryFilterCallback filterCall) {
    bool ret = physxPINVOKE.PxVolumeCache_sweep__SWIG_1(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData) {
    bool ret = physxPINVOKE.PxVolumeCache_sweep__SWIG_2(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags) {
    bool ret = physxPINVOKE.PxVolumeCache_sweep__SWIG_3(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall) {
    bool ret = physxPINVOKE.PxVolumeCache_sweep__SWIG_4(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool overlap(PxGeometry geometry, PxTransform pose, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t hitCall, PxQueryFilterData filterData, PxQueryFilterCallback filterCall) {
    bool ret = physxPINVOKE.PxVolumeCache_overlap__SWIG_0(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t.getCPtr(hitCall), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool overlap(PxGeometry geometry, PxTransform pose, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t hitCall, PxQueryFilterData filterData) {
    bool ret = physxPINVOKE.PxVolumeCache_overlap__SWIG_1(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t.getCPtr(hitCall), PxQueryFilterData.getCPtr(filterData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool overlap(PxGeometry geometry, PxTransform pose, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t hitCall) {
    bool ret = physxPINVOKE.PxVolumeCache_overlap__SWIG_2(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t.getCPtr(hitCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum FillStatus {
    FILL_OK,
    FILL_OVER_MAX_COUNT,
    FILL_UNSUPPORTED_GEOMETRY_TYPE,
    FILL_OUT_OF_MEMORY
  }

}

}
