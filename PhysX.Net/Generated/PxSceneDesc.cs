//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxSceneDesc : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxSceneDesc(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxSceneDesc obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxSceneDesc() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          physxPINVOKE.delete_PxSceneDesc(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxVec3 gravity {
    set {
      physxPINVOKE.PxSceneDesc_gravity_set(swigCPtr, PxVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_gravity_get(swigCPtr);
      PxVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVec3(cPtr, false);
      return ret;
    } 
  }

  public PxSimulationEventCallback simulationEventCallback {
    set {
      physxPINVOKE.PxSceneDesc_simulationEventCallback_set(swigCPtr, PxSimulationEventCallback.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_simulationEventCallback_get(swigCPtr);
      PxSimulationEventCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSimulationEventCallback(cPtr, false);
      return ret;
    } 
  }

  public PxContactModifyCallback contactModifyCallback {
    set {
      physxPINVOKE.PxSceneDesc_contactModifyCallback_set(swigCPtr, PxContactModifyCallback.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_contactModifyCallback_get(swigCPtr);
      PxContactModifyCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxContactModifyCallback(cPtr, false);
      return ret;
    } 
  }

  public PxCCDContactModifyCallback ccdContactModifyCallback {
    set {
      physxPINVOKE.PxSceneDesc_ccdContactModifyCallback_set(swigCPtr, PxCCDContactModifyCallback.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_ccdContactModifyCallback_get(swigCPtr);
      PxCCDContactModifyCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxCCDContactModifyCallback(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void filterShaderData {
    set {
      physxPINVOKE.PxSceneDesc_filterShaderData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_filterShaderData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t filterShaderDataSize {
    set {
      physxPINVOKE.PxSceneDesc_filterShaderDataSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSceneDesc_filterShaderDataSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_f_uint32_t_physx__PxFilterData_uint32_t_physx__PxFilterData_r_physx__PxFlags__enum_physx__PxPairFlag__Enum_uint16_t___p_q_const__void_uint32_t__physx__PxFlagsT_physx__PxFilterFlag__Enum_uint16_t_t filterShader {
    set {
      physxPINVOKE.PxSceneDesc_filterShader_set(swigCPtr, SWIGTYPE_p_f_uint32_t_physx__PxFilterData_uint32_t_physx__PxFilterData_r_physx__PxFlags__enum_physx__PxPairFlag__Enum_uint16_t___p_q_const__void_uint32_t__physx__PxFlagsT_physx__PxFilterFlag__Enum_uint16_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_filterShader_get(swigCPtr);
      SWIGTYPE_p_f_uint32_t_physx__PxFilterData_uint32_t_physx__PxFilterData_r_physx__PxFlags__enum_physx__PxPairFlag__Enum_uint16_t___p_q_const__void_uint32_t__physx__PxFlagsT_physx__PxFilterFlag__Enum_uint16_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_uint32_t_physx__PxFilterData_uint32_t_physx__PxFilterData_r_physx__PxFlags__enum_physx__PxPairFlag__Enum_uint16_t___p_q_const__void_uint32_t__physx__PxFlagsT_physx__PxFilterFlag__Enum_uint16_t_t(cPtr, false);
      return ret;
    } 
  }

  public PxSimulationFilterCallback filterCallback {
    set {
      physxPINVOKE.PxSceneDesc_filterCallback_set(swigCPtr, PxSimulationFilterCallback.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_filterCallback_get(swigCPtr);
      PxSimulationFilterCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSimulationFilterCallback(cPtr, false);
      return ret;
    } 
  }

  public PxPairFilteringMode.Enum kineKineFilteringMode {
    set {
      physxPINVOKE.PxSceneDesc_kineKineFilteringMode_set(swigCPtr, (int)value);
    } 
    get {
      PxPairFilteringMode.Enum ret = (PxPairFilteringMode.Enum)physxPINVOKE.PxSceneDesc_kineKineFilteringMode_get(swigCPtr);
      return ret;
    } 
  }

  public PxPairFilteringMode.Enum staticKineFilteringMode {
    set {
      physxPINVOKE.PxSceneDesc_staticKineFilteringMode_set(swigCPtr, (int)value);
    } 
    get {
      PxPairFilteringMode.Enum ret = (PxPairFilteringMode.Enum)physxPINVOKE.PxSceneDesc_staticKineFilteringMode_get(swigCPtr);
      return ret;
    } 
  }

  public PxBroadPhaseType.Enum broadPhaseType {
    set {
      physxPINVOKE.PxSceneDesc_broadPhaseType_set(swigCPtr, (int)value);
    } 
    get {
      PxBroadPhaseType.Enum ret = (PxBroadPhaseType.Enum)physxPINVOKE.PxSceneDesc_broadPhaseType_get(swigCPtr);
      return ret;
    } 
  }

  public PxBroadPhaseCallback broadPhaseCallback {
    set {
      physxPINVOKE.PxSceneDesc_broadPhaseCallback_set(swigCPtr, PxBroadPhaseCallback.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_broadPhaseCallback_get(swigCPtr);
      PxBroadPhaseCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxBroadPhaseCallback(cPtr, false);
      return ret;
    } 
  }

  public PxSceneLimits limits {
    set {
      physxPINVOKE.PxSceneDesc_limits_set(swigCPtr, PxSceneLimits.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_limits_get(swigCPtr);
      PxSceneLimits ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSceneLimits(cPtr, false);
      return ret;
    } 
  }

  public PxFrictionType.Enum frictionType {
    set {
      physxPINVOKE.PxSceneDesc_frictionType_set(swigCPtr, (int)value);
    } 
    get {
      PxFrictionType.Enum ret = (PxFrictionType.Enum)physxPINVOKE.PxSceneDesc_frictionType_get(swigCPtr);
      return ret;
    } 
  }

  public float bounceThresholdVelocity {
    set {
      physxPINVOKE.PxSceneDesc_bounceThresholdVelocity_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxSceneDesc_bounceThresholdVelocity_get(swigCPtr);
      return ret;
    } 
  }

  public float frictionOffsetThreshold {
    set {
      physxPINVOKE.PxSceneDesc_frictionOffsetThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxSceneDesc_frictionOffsetThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public float ccdMaxSeparation {
    set {
      physxPINVOKE.PxSceneDesc_ccdMaxSeparation_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxSceneDesc_ccdMaxSeparation_get(swigCPtr);
      return ret;
    } 
  }

  public float solverOffsetSlop {
    set {
      physxPINVOKE.PxSceneDesc_solverOffsetSlop_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxSceneDesc_solverOffsetSlop_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_physx__PxFlagsT_physx__PxSceneFlag__Enum_uint32_t_t flags {
    set {
      physxPINVOKE.PxSceneDesc_flags_set(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxSceneFlag__Enum_uint32_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_flags_get(swigCPtr);
      SWIGTYPE_p_physx__PxFlagsT_physx__PxSceneFlag__Enum_uint32_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxFlagsT_physx__PxSceneFlag__Enum_uint32_t_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_PxCpuDispatcher cpuDispatcher {
    set {
      physxPINVOKE.PxSceneDesc_cpuDispatcher_set(swigCPtr, SWIGTYPE_p_PxCpuDispatcher.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_cpuDispatcher_get(swigCPtr);
      SWIGTYPE_p_PxCpuDispatcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_PxCpuDispatcher(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_PxGpuDispatcher gpuDispatcher {
    set {
      physxPINVOKE.PxSceneDesc_gpuDispatcher_set(swigCPtr, SWIGTYPE_p_PxGpuDispatcher.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_gpuDispatcher_get(swigCPtr);
      SWIGTYPE_p_PxGpuDispatcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_PxGpuDispatcher(cPtr, false);
      return ret;
    } 
  }

  public PxPruningStructureType.Enum staticStructure {
    set {
      physxPINVOKE.PxSceneDesc_staticStructure_set(swigCPtr, (int)value);
    } 
    get {
      PxPruningStructureType.Enum ret = (PxPruningStructureType.Enum)physxPINVOKE.PxSceneDesc_staticStructure_get(swigCPtr);
      return ret;
    } 
  }

  public PxPruningStructureType.Enum dynamicStructure {
    set {
      physxPINVOKE.PxSceneDesc_dynamicStructure_set(swigCPtr, (int)value);
    } 
    get {
      PxPruningStructureType.Enum ret = (PxPruningStructureType.Enum)physxPINVOKE.PxSceneDesc_dynamicStructure_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t dynamicTreeRebuildRateHint {
    set {
      physxPINVOKE.PxSceneDesc_dynamicTreeRebuildRateHint_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSceneDesc_dynamicTreeRebuildRateHint_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxSceneQueryUpdateMode.Enum sceneQueryUpdateMode {
    set {
      physxPINVOKE.PxSceneDesc_sceneQueryUpdateMode_set(swigCPtr, (int)value);
    } 
    get {
      PxSceneQueryUpdateMode.Enum ret = (PxSceneQueryUpdateMode.Enum)physxPINVOKE.PxSceneDesc_sceneQueryUpdateMode_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void userData {
    set {
      physxPINVOKE.PxSceneDesc_userData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_userData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t solverBatchSize {
    set {
      physxPINVOKE.PxSceneDesc_solverBatchSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSceneDesc_solverBatchSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbContactDataBlocks {
    set {
      physxPINVOKE.PxSceneDesc_nbContactDataBlocks_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSceneDesc_nbContactDataBlocks_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t maxNbContactDataBlocks {
    set {
      physxPINVOKE.PxSceneDesc_maxNbContactDataBlocks_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSceneDesc_maxNbContactDataBlocks_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float maxBiasCoefficient {
    set {
      physxPINVOKE.PxSceneDesc_maxBiasCoefficient_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxSceneDesc_maxBiasCoefficient_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t contactReportStreamBufferSize {
    set {
      physxPINVOKE.PxSceneDesc_contactReportStreamBufferSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSceneDesc_contactReportStreamBufferSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t ccdMaxPasses {
    set {
      physxPINVOKE.PxSceneDesc_ccdMaxPasses_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSceneDesc_ccdMaxPasses_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float wakeCounterResetValue {
    set {
      physxPINVOKE.PxSceneDesc_wakeCounterResetValue_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxSceneDesc_wakeCounterResetValue_get(swigCPtr);
      return ret;
    } 
  }

  public PxBounds3 sanityBounds {
    set {
      physxPINVOKE.PxSceneDesc_sanityBounds_set(swigCPtr, PxBounds3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_sanityBounds_get(swigCPtr);
      PxBounds3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxBounds3(cPtr, false);
      return ret;
    } 
  }

  public PxgDynamicsMemoryConfig gpuDynamicsConfig {
    set {
      physxPINVOKE.PxSceneDesc_gpuDynamicsConfig_set(swigCPtr, PxgDynamicsMemoryConfig.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSceneDesc_gpuDynamicsConfig_get(swigCPtr);
      PxgDynamicsMemoryConfig ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxgDynamicsMemoryConfig(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t gpuMaxNumPartitions {
    set {
      physxPINVOKE.PxSceneDesc_gpuMaxNumPartitions_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSceneDesc_gpuMaxNumPartitions_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t gpuComputeVersion {
    set {
      physxPINVOKE.PxSceneDesc_gpuComputeVersion_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSceneDesc_gpuComputeVersion_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxSceneDesc(PxTolerancesScale scale) : this(physxPINVOKE.new_PxSceneDesc(PxTolerancesScale.getCPtr(scale)), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setToDefault(PxTolerancesScale scale) {
    physxPINVOKE.PxSceneDesc_setToDefault(swigCPtr, PxTolerancesScale.getCPtr(scale));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isValid() {
    bool ret = physxPINVOKE.PxSceneDesc_isValid(swigCPtr);
    return ret;
  }

  public PxTolerancesScale getTolerancesScale() {
    PxTolerancesScale ret = new PxTolerancesScale(physxPINVOKE.PxSceneDesc_getTolerancesScale(swigCPtr), false);
    return ret;
  }

}

}
