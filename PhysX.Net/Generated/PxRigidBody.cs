//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxRigidBody : PxRigidActor {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxRigidBody(global::System.IntPtr cPtr, bool cMemoryOwn) : base(physxPINVOKE.PxRigidBody_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxRigidBody obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void setCMassLocalPose(PxTransform pose) {
    physxPINVOKE.PxRigidBody_setCMassLocalPose(swigCPtr, PxTransform.getCPtr(pose));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxTransform getCMassLocalPose() {
    PxTransform ret = new PxTransform(physxPINVOKE.PxRigidBody_getCMassLocalPose(swigCPtr), true);
    return ret;
  }

  public virtual void setMass(float mass) {
    physxPINVOKE.PxRigidBody_setMass(swigCPtr, mass);
  }

  public virtual float getMass() {
    float ret = physxPINVOKE.PxRigidBody_getMass(swigCPtr);
    return ret;
  }

  public virtual float getInvMass() {
    float ret = physxPINVOKE.PxRigidBody_getInvMass(swigCPtr);
    return ret;
  }

  public virtual void setMassSpaceInertiaTensor(PxVec3 m) {
    physxPINVOKE.PxRigidBody_setMassSpaceInertiaTensor(swigCPtr, PxVec3.getCPtr(m));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxVec3 getMassSpaceInertiaTensor() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxRigidBody_getMassSpaceInertiaTensor(swigCPtr), true);
    return ret;
  }

  public virtual PxVec3 getMassSpaceInvInertiaTensor() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxRigidBody_getMassSpaceInvInertiaTensor(swigCPtr), true);
    return ret;
  }

  public virtual PxVec3 getLinearVelocity() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxRigidBody_getLinearVelocity(swigCPtr), true);
    return ret;
  }

  public virtual void setLinearVelocity(PxVec3 linVel, bool autowake) {
    physxPINVOKE.PxRigidBody_setLinearVelocity__SWIG_0(swigCPtr, PxVec3.getCPtr(linVel), autowake);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setLinearVelocity(PxVec3 linVel) {
    physxPINVOKE.PxRigidBody_setLinearVelocity__SWIG_1(swigCPtr, PxVec3.getCPtr(linVel));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxVec3 getAngularVelocity() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxRigidBody_getAngularVelocity(swigCPtr), true);
    return ret;
  }

  public virtual void setAngularVelocity(PxVec3 angVel, bool autowake) {
    physxPINVOKE.PxRigidBody_setAngularVelocity__SWIG_0(swigCPtr, PxVec3.getCPtr(angVel), autowake);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setAngularVelocity(PxVec3 angVel) {
    physxPINVOKE.PxRigidBody_setAngularVelocity__SWIG_1(swigCPtr, PxVec3.getCPtr(angVel));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addForce(PxVec3 force, PxForceMode.Enum mode, bool autowake) {
    physxPINVOKE.PxRigidBody_addForce__SWIG_0(swigCPtr, PxVec3.getCPtr(force), (int)mode, autowake);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addForce(PxVec3 force, PxForceMode.Enum mode) {
    physxPINVOKE.PxRigidBody_addForce__SWIG_1(swigCPtr, PxVec3.getCPtr(force), (int)mode);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addForce(PxVec3 force) {
    physxPINVOKE.PxRigidBody_addForce__SWIG_2(swigCPtr, PxVec3.getCPtr(force));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addTorque(PxVec3 torque, PxForceMode.Enum mode, bool autowake) {
    physxPINVOKE.PxRigidBody_addTorque__SWIG_0(swigCPtr, PxVec3.getCPtr(torque), (int)mode, autowake);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addTorque(PxVec3 torque, PxForceMode.Enum mode) {
    physxPINVOKE.PxRigidBody_addTorque__SWIG_1(swigCPtr, PxVec3.getCPtr(torque), (int)mode);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addTorque(PxVec3 torque) {
    physxPINVOKE.PxRigidBody_addTorque__SWIG_2(swigCPtr, PxVec3.getCPtr(torque));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clearForce(PxForceMode.Enum mode) {
    physxPINVOKE.PxRigidBody_clearForce__SWIG_0(swigCPtr, (int)mode);
  }

  public virtual void clearForce() {
    physxPINVOKE.PxRigidBody_clearForce__SWIG_1(swigCPtr);
  }

  public virtual void clearTorque(PxForceMode.Enum mode) {
    physxPINVOKE.PxRigidBody_clearTorque__SWIG_0(swigCPtr, (int)mode);
  }

  public virtual void clearTorque() {
    physxPINVOKE.PxRigidBody_clearTorque__SWIG_1(swigCPtr);
  }

  public virtual void setRigidBodyFlag(PxRigidBodyFlag.Enum flag, bool value) {
    physxPINVOKE.PxRigidBody_setRigidBodyFlag(swigCPtr, (int)flag, value);
  }

  public virtual void setRigidBodyFlags(SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidBodyFlag__Enum_uint8_t_t inFlags) {
    physxPINVOKE.PxRigidBody_setRigidBodyFlags(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidBodyFlag__Enum_uint8_t_t.getCPtr(inFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidBodyFlag__Enum_uint8_t_t getRigidBodyFlags() {
    SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidBodyFlag__Enum_uint8_t_t ret = new SWIGTYPE_p_physx__PxFlagsT_physx__PxRigidBodyFlag__Enum_uint8_t_t(physxPINVOKE.PxRigidBody_getRigidBodyFlags(swigCPtr), true);
    return ret;
  }

  public virtual void setMinCCDAdvanceCoefficient(float advanceCoefficient) {
    physxPINVOKE.PxRigidBody_setMinCCDAdvanceCoefficient(swigCPtr, advanceCoefficient);
  }

  public virtual float getMinCCDAdvanceCoefficient() {
    float ret = physxPINVOKE.PxRigidBody_getMinCCDAdvanceCoefficient(swigCPtr);
    return ret;
  }

  public virtual void setMaxDepenetrationVelocity(float biasClamp) {
    physxPINVOKE.PxRigidBody_setMaxDepenetrationVelocity(swigCPtr, biasClamp);
  }

  public virtual float getMaxDepenetrationVelocity() {
    float ret = physxPINVOKE.PxRigidBody_getMaxDepenetrationVelocity(swigCPtr);
    return ret;
  }

  public virtual void setMaxContactImpulse(float maxImpulse) {
    physxPINVOKE.PxRigidBody_setMaxContactImpulse(swigCPtr, maxImpulse);
  }

  public virtual float getMaxContactImpulse() {
    float ret = physxPINVOKE.PxRigidBody_getMaxContactImpulse(swigCPtr);
    return ret;
  }

}

}
