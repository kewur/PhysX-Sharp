//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxSimulationStatistics : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxSimulationStatistics(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxSimulationStatistics obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxSimulationStatistics() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          physxPINVOKE.delete_PxSimulationStatistics(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_uint32_t nbActiveConstraints {
    set {
      physxPINVOKE.PxSimulationStatistics_nbActiveConstraints_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbActiveConstraints_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbActiveDynamicBodies {
    set {
      physxPINVOKE.PxSimulationStatistics_nbActiveDynamicBodies_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbActiveDynamicBodies_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbActiveKinematicBodies {
    set {
      physxPINVOKE.PxSimulationStatistics_nbActiveKinematicBodies_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbActiveKinematicBodies_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbStaticBodies {
    set {
      physxPINVOKE.PxSimulationStatistics_nbStaticBodies_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbStaticBodies_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbDynamicBodies {
    set {
      physxPINVOKE.PxSimulationStatistics_nbDynamicBodies_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbDynamicBodies_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbShapes {
    set {
      physxPINVOKE.PxSimulationStatistics_nbShapes_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSimulationStatistics_nbShapes_get(swigCPtr);
      SWIGTYPE_p_uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint32_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbAggregates {
    set {
      physxPINVOKE.PxSimulationStatistics_nbAggregates_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbAggregates_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbArticulations {
    set {
      physxPINVOKE.PxSimulationStatistics_nbArticulations_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbArticulations_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbAxisSolverConstraints {
    set {
      physxPINVOKE.PxSimulationStatistics_nbAxisSolverConstraints_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbAxisSolverConstraints_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t compressedContactSize {
    set {
      physxPINVOKE.PxSimulationStatistics_compressedContactSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_compressedContactSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t requiredContactConstraintMemory {
    set {
      physxPINVOKE.PxSimulationStatistics_requiredContactConstraintMemory_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_requiredContactConstraintMemory_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t peakConstraintMemory {
    set {
      physxPINVOKE.PxSimulationStatistics_peakConstraintMemory_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_peakConstraintMemory_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t getNbBroadPhaseAdds(PxSimulationStatistics.VolumeType type) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_getNbBroadPhaseAdds(swigCPtr, (int)type), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t getNbBroadPhaseRemoves(PxSimulationStatistics.VolumeType type) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_getNbBroadPhaseRemoves(swigCPtr, (int)type), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t getRbPairStats(PxSimulationStatistics.RbPairStatsType pairType, SWIGTYPE_p_PxGeometryType__Enum g0, SWIGTYPE_p_PxGeometryType__Enum g1) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_getRbPairStats(swigCPtr, (int)pairType, SWIGTYPE_p_PxGeometryType__Enum.getCPtr(g0), SWIGTYPE_p_PxGeometryType__Enum.getCPtr(g1)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_uint32_t nbDiscreteContactPairsTotal {
    set {
      physxPINVOKE.PxSimulationStatistics_nbDiscreteContactPairsTotal_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbDiscreteContactPairsTotal_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbDiscreteContactPairsWithCacheHits {
    set {
      physxPINVOKE.PxSimulationStatistics_nbDiscreteContactPairsWithCacheHits_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbDiscreteContactPairsWithCacheHits_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbDiscreteContactPairsWithContacts {
    set {
      physxPINVOKE.PxSimulationStatistics_nbDiscreteContactPairsWithContacts_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbDiscreteContactPairsWithContacts_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbNewPairs {
    set {
      physxPINVOKE.PxSimulationStatistics_nbNewPairs_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbNewPairs_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbLostPairs {
    set {
      physxPINVOKE.PxSimulationStatistics_nbLostPairs_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbLostPairs_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbNewTouches {
    set {
      physxPINVOKE.PxSimulationStatistics_nbNewTouches_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbNewTouches_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbLostTouches {
    set {
      physxPINVOKE.PxSimulationStatistics_nbLostTouches_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbLostTouches_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbPartitions {
    set {
      physxPINVOKE.PxSimulationStatistics_nbPartitions_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_nbPartitions_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxSimulationStatistics() : this(physxPINVOKE.new_PxSimulationStatistics(), true) {
  }

  public SWIGTYPE_p_uint32_t nbBroadPhaseAdds {
    set {
      physxPINVOKE.PxSimulationStatistics_nbBroadPhaseAdds_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSimulationStatistics_nbBroadPhaseAdds_get(swigCPtr);
      SWIGTYPE_p_uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint32_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nbBroadPhaseRemoves {
    set {
      physxPINVOKE.PxSimulationStatistics_nbBroadPhaseRemoves_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSimulationStatistics_nbBroadPhaseRemoves_get(swigCPtr);
      SWIGTYPE_p_uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint32_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t nbDiscreteContactPairs {
    set {
      physxPINVOKE.PxSimulationStatistics_nbDiscreteContactPairs_set(swigCPtr, SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSimulationStatistics_nbDiscreteContactPairs_get(swigCPtr);
      SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t nbCCDPairs {
    set {
      physxPINVOKE.PxSimulationStatistics_nbCCDPairs_set(swigCPtr, SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSimulationStatistics_nbCCDPairs_get(swigCPtr);
      SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t nbModifiedContactPairs {
    set {
      physxPINVOKE.PxSimulationStatistics_nbModifiedContactPairs_set(swigCPtr, SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSimulationStatistics_nbModifiedContactPairs_get(swigCPtr);
      SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t nbTriggerPairs {
    set {
      physxPINVOKE.PxSimulationStatistics_nbTriggerPairs_set(swigCPtr, SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxSimulationStatistics_nbTriggerPairs_get(swigCPtr);
      SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_physx__PxGeometryType__eGEOMETRY_COUNT__uint32_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t particlesGpuMeshCacheSize {
    set {
      physxPINVOKE.PxSimulationStatistics_particlesGpuMeshCacheSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_particlesGpuMeshCacheSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t particlesGpuMeshCacheUsed {
    set {
      physxPINVOKE.PxSimulationStatistics_particlesGpuMeshCacheUsed_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxSimulationStatistics_particlesGpuMeshCacheUsed_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float particlesGpuMeshCacheHitrate {
    set {
      physxPINVOKE.PxSimulationStatistics_particlesGpuMeshCacheHitrate_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxSimulationStatistics_particlesGpuMeshCacheHitrate_get(swigCPtr);
      return ret;
    } 
  }

  public enum VolumeType {
    eRIGID_BODY,
    ePARTICLE_SYSTEM,
    eCLOTH,
    eVOLUME_COUNT
  }

  public enum RbPairStatsType {
    eDISCRETE_CONTACT_PAIRS,
    eCCD_PAIRS,
    eMODIFIED_CONTACT_PAIRS,
    eTRIGGER_PAIRS
  }

}

}
