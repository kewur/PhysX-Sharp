//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxConstraintVisualizer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxConstraintVisualizer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxConstraintVisualizer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void visualizeJointFrames(PxTransform parent, PxTransform child) {
    physxPINVOKE.PxConstraintVisualizer_visualizeJointFrames(swigCPtr, PxTransform.getCPtr(parent), PxTransform.getCPtr(child));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void visualizeLinearLimit(PxTransform t0, PxTransform t1, float value, bool active) {
    physxPINVOKE.PxConstraintVisualizer_visualizeLinearLimit(swigCPtr, PxTransform.getCPtr(t0), PxTransform.getCPtr(t1), value, active);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void visualizeAngularLimit(PxTransform t0, float lower, float upper, bool active) {
    physxPINVOKE.PxConstraintVisualizer_visualizeAngularLimit(swigCPtr, PxTransform.getCPtr(t0), lower, upper, active);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void visualizeLimitCone(PxTransform t, float ySwing, float zSwing, bool active) {
    physxPINVOKE.PxConstraintVisualizer_visualizeLimitCone(swigCPtr, PxTransform.getCPtr(t), ySwing, zSwing, active);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void visualizeDoubleCone(PxTransform t, float angle, bool active) {
    physxPINVOKE.PxConstraintVisualizer_visualizeDoubleCone(swigCPtr, PxTransform.getCPtr(t), angle, active);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void visualizeLine(PxVec3 p0, PxVec3 p1, SWIGTYPE_p_uint32_t color) {
    physxPINVOKE.PxConstraintVisualizer_visualizeLine(swigCPtr, PxVec3.getCPtr(p0), PxVec3.getCPtr(p1), SWIGTYPE_p_uint32_t.getCPtr(color));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
