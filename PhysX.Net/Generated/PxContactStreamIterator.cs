//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxContactStreamIterator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxContactStreamIterator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxContactStreamIterator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxContactStreamIterator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          physxPINVOKE.delete_PxContactStreamIterator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxVec3 zero {
    set {
      physxPINVOKE.PxContactStreamIterator_zero_set(swigCPtr, PxVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactStreamIterator_zero_get(swigCPtr);
      PxVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVec3(cPtr, false);
      return ret;
    } 
  }

  public PxContactPatch patch {
    set {
      physxPINVOKE.PxContactStreamIterator_patch_set(swigCPtr, PxContactPatch.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactStreamIterator_patch_get(swigCPtr);
      PxContactPatch ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxContactPatch(cPtr, false);
      return ret;
    } 
  }

  public PxContact contact {
    set {
      physxPINVOKE.PxContactStreamIterator_contact_set(swigCPtr, PxContact.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactStreamIterator_contact_get(swigCPtr);
      PxContact ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxContact(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t faceIndice {
    set {
      physxPINVOKE.PxContactStreamIterator_faceIndice_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxContactStreamIterator_faceIndice_get(swigCPtr);
      SWIGTYPE_p_uint32_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_uint32_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t totalPatches {
    set {
      physxPINVOKE.PxContactStreamIterator_totalPatches_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_totalPatches_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t totalContacts {
    set {
      physxPINVOKE.PxContactStreamIterator_totalContacts_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_totalContacts_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nextContactIndex {
    set {
      physxPINVOKE.PxContactStreamIterator_nextContactIndex_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_nextContactIndex_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t nextPatchIndex {
    set {
      physxPINVOKE.PxContactStreamIterator_nextPatchIndex_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_nextPatchIndex_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t contactPatchHeaderSize {
    set {
      physxPINVOKE.PxContactStreamIterator_contactPatchHeaderSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_contactPatchHeaderSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t contactPointSize {
    set {
      physxPINVOKE.PxContactStreamIterator_contactPointSize_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_contactPointSize_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxContactStreamIterator.StreamFormat mStreamFormat {
    set {
      physxPINVOKE.PxContactStreamIterator_mStreamFormat_set(swigCPtr, (int)value);
    } 
    get {
      PxContactStreamIterator.StreamFormat ret = (PxContactStreamIterator.StreamFormat)physxPINVOKE.PxContactStreamIterator_mStreamFormat_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t forceNoResponse {
    set {
      physxPINVOKE.PxContactStreamIterator_forceNoResponse_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_forceNoResponse_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool pointStepped {
    set {
      physxPINVOKE.PxContactStreamIterator_pointStepped_set(swigCPtr, value);
    } 
    get {
      bool ret = physxPINVOKE.PxContactStreamIterator_pointStepped_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t hasFaceIndices {
    set {
      physxPINVOKE.PxContactStreamIterator_hasFaceIndices_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_hasFaceIndices_get(swigCPtr), true);
      if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxContactStreamIterator(SWIGTYPE_p_uint8_t contactPatches, SWIGTYPE_p_uint8_t contactPoints, SWIGTYPE_p_uint32_t contactFaceIndices, SWIGTYPE_p_uint32_t nbPatches, SWIGTYPE_p_uint32_t nbContacts) : this(physxPINVOKE.new_PxContactStreamIterator(SWIGTYPE_p_uint8_t.getCPtr(contactPatches), SWIGTYPE_p_uint8_t.getCPtr(contactPoints), SWIGTYPE_p_uint32_t.getCPtr(contactFaceIndices), SWIGTYPE_p_uint32_t.getCPtr(nbPatches), SWIGTYPE_p_uint32_t.getCPtr(nbContacts)), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasNextPatch() {
    bool ret = physxPINVOKE.PxContactStreamIterator_hasNextPatch(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_uint32_t getTotalContactCount() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_getTotalContactCount(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t getTotalPatchCount() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_getTotalPatchCount(swigCPtr), true);
    return ret;
  }

  public void nextPatch() {
    physxPINVOKE.PxContactStreamIterator_nextPatch(swigCPtr);
  }

  public bool hasNextContact() {
    bool ret = physxPINVOKE.PxContactStreamIterator_hasNextContact(swigCPtr);
    return ret;
  }

  public void nextContact() {
    physxPINVOKE.PxContactStreamIterator_nextContact(swigCPtr);
  }

  public PxVec3 getContactNormal() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxContactStreamIterator_getContactNormal(swigCPtr), false);
    return ret;
  }

  public float getInvMassScale0() {
    float ret = physxPINVOKE.PxContactStreamIterator_getInvMassScale0(swigCPtr);
    return ret;
  }

  public float getInvMassScale1() {
    float ret = physxPINVOKE.PxContactStreamIterator_getInvMassScale1(swigCPtr);
    return ret;
  }

  public float getInvInertiaScale0() {
    float ret = physxPINVOKE.PxContactStreamIterator_getInvInertiaScale0(swigCPtr);
    return ret;
  }

  public float getInvInertiaScale1() {
    float ret = physxPINVOKE.PxContactStreamIterator_getInvInertiaScale1(swigCPtr);
    return ret;
  }

  public float getMaxImpulse() {
    float ret = physxPINVOKE.PxContactStreamIterator_getMaxImpulse(swigCPtr);
    return ret;
  }

  public PxVec3 getTargetVel() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxContactStreamIterator_getTargetVel(swigCPtr), false);
    return ret;
  }

  public PxVec3 getContactPoint() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxContactStreamIterator_getContactPoint(swigCPtr), false);
    return ret;
  }

  public float getSeparation() {
    float ret = physxPINVOKE.PxContactStreamIterator_getSeparation(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_uint32_t getFaceIndex0() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_getFaceIndex0(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t getFaceIndex1() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_getFaceIndex1(swigCPtr), true);
    return ret;
  }

  public float getStaticFriction() {
    float ret = physxPINVOKE.PxContactStreamIterator_getStaticFriction(swigCPtr);
    return ret;
  }

  public float getDynamicFriction() {
    float ret = physxPINVOKE.PxContactStreamIterator_getDynamicFriction(swigCPtr);
    return ret;
  }

  public float getRestitution() {
    float ret = physxPINVOKE.PxContactStreamIterator_getRestitution(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_uint32_t getMaterialFlags() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxContactStreamIterator_getMaterialFlags(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_uint16_t getMaterialIndex0() {
    SWIGTYPE_p_uint16_t ret = new SWIGTYPE_p_uint16_t(physxPINVOKE.PxContactStreamIterator_getMaterialIndex0(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_uint16_t getMaterialIndex1() {
    SWIGTYPE_p_uint16_t ret = new SWIGTYPE_p_uint16_t(physxPINVOKE.PxContactStreamIterator_getMaterialIndex1(swigCPtr), true);
    return ret;
  }

  public bool advanceToIndex(SWIGTYPE_p_uint32_t initialIndex) {
    bool ret = physxPINVOKE.PxContactStreamIterator_advanceToIndex(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(initialIndex));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum StreamFormat {
    eSIMPLE_STREAM,
    eMODIFIABLE_STREAM,
    eCOMPRESSED_MODIFIABLE_STREAM
  }

}

}
