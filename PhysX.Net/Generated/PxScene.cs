//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxScene : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxScene(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxScene obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void release() {
    physxPINVOKE.PxScene_release(swigCPtr);
  }

  public virtual void setFlag(PxSceneFlag.Enum flag, bool value) {
    physxPINVOKE.PxScene_setFlag(swigCPtr, (int)flag, value);
  }

  public virtual SWIGTYPE_p_physx__PxFlagsT_physx__PxSceneFlag__Enum_uint32_t_t getFlags() {
    SWIGTYPE_p_physx__PxFlagsT_physx__PxSceneFlag__Enum_uint32_t_t ret = new SWIGTYPE_p_physx__PxFlagsT_physx__PxSceneFlag__Enum_uint32_t_t(physxPINVOKE.PxScene_getFlags(swigCPtr), true);
    return ret;
  }

  public virtual void setLimits(PxSceneLimits limits) {
    physxPINVOKE.PxScene_setLimits(swigCPtr, PxSceneLimits.getCPtr(limits));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxSceneLimits getLimits() {
    PxSceneLimits ret = new PxSceneLimits(physxPINVOKE.PxScene_getLimits(swigCPtr), true);
    return ret;
  }

  public virtual PxPhysics getPhysics() {
    PxPhysics ret = new PxPhysics(physxPINVOKE.PxScene_getPhysics(swigCPtr), false);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getTimestamp() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getTimestamp(swigCPtr), true);
    return ret;
  }

  public virtual void addArticulation(PxArticulation articulation) {
    physxPINVOKE.PxScene_addArticulation(swigCPtr, PxArticulation.getCPtr(articulation));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeArticulation(PxArticulation articulation, bool wakeOnLostTouch) {
    physxPINVOKE.PxScene_removeArticulation__SWIG_0(swigCPtr, PxArticulation.getCPtr(articulation), wakeOnLostTouch);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeArticulation(PxArticulation articulation) {
    physxPINVOKE.PxScene_removeArticulation__SWIG_1(swigCPtr, PxArticulation.getCPtr(articulation));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addActor(PxActor actor) {
    physxPINVOKE.PxScene_addActor(swigCPtr, PxActor.getCPtr(actor));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addActors(SWIGTYPE_p_p_physx__PxActor actors, SWIGTYPE_p_uint32_t nbActors) {
    physxPINVOKE.PxScene_addActors__SWIG_0(swigCPtr, SWIGTYPE_p_p_physx__PxActor.getCPtr(actors), SWIGTYPE_p_uint32_t.getCPtr(nbActors));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addActors(SWIGTYPE_p_physx__PxPruningStructure pruningStructure) {
    physxPINVOKE.PxScene_addActors__SWIG_1(swigCPtr, SWIGTYPE_p_physx__PxPruningStructure.getCPtr(pruningStructure));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeActor(PxActor actor, bool wakeOnLostTouch) {
    physxPINVOKE.PxScene_removeActor__SWIG_0(swigCPtr, PxActor.getCPtr(actor), wakeOnLostTouch);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeActor(PxActor actor) {
    physxPINVOKE.PxScene_removeActor__SWIG_1(swigCPtr, PxActor.getCPtr(actor));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeActors(SWIGTYPE_p_p_physx__PxActor actors, SWIGTYPE_p_uint32_t nbActors, bool wakeOnLostTouch) {
    physxPINVOKE.PxScene_removeActors__SWIG_0(swigCPtr, SWIGTYPE_p_p_physx__PxActor.getCPtr(actors), SWIGTYPE_p_uint32_t.getCPtr(nbActors), wakeOnLostTouch);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeActors(SWIGTYPE_p_p_physx__PxActor actors, SWIGTYPE_p_uint32_t nbActors) {
    physxPINVOKE.PxScene_removeActors__SWIG_1(swigCPtr, SWIGTYPE_p_p_physx__PxActor.getCPtr(actors), SWIGTYPE_p_uint32_t.getCPtr(nbActors));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addAggregate(PxAggregate aggregate) {
    physxPINVOKE.PxScene_addAggregate(swigCPtr, PxAggregate.getCPtr(aggregate));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeAggregate(PxAggregate aggregate, bool wakeOnLostTouch) {
    physxPINVOKE.PxScene_removeAggregate__SWIG_0(swigCPtr, PxAggregate.getCPtr(aggregate), wakeOnLostTouch);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeAggregate(PxAggregate aggregate) {
    physxPINVOKE.PxScene_removeAggregate__SWIG_1(swigCPtr, PxAggregate.getCPtr(aggregate));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addCollection(SWIGTYPE_p_PxCollection collection) {
    physxPINVOKE.PxScene_addCollection(swigCPtr, SWIGTYPE_p_PxCollection.getCPtr(collection));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getNbActors(SWIGTYPE_p_physx__PxFlagsT_physx__PxActorTypeFlag__Enum_uint16_t_t types) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getNbActors(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxActorTypeFlag__Enum_uint16_t_t.getCPtr(types)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getActors(SWIGTYPE_p_physx__PxFlagsT_physx__PxActorTypeFlag__Enum_uint16_t_t types, SWIGTYPE_p_p_physx__PxActor userBuffer, SWIGTYPE_p_uint32_t bufferSize, SWIGTYPE_p_uint32_t startIndex) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getActors__SWIG_0(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxActorTypeFlag__Enum_uint16_t_t.getCPtr(types), SWIGTYPE_p_p_physx__PxActor.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize), SWIGTYPE_p_uint32_t.getCPtr(startIndex)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getActors(SWIGTYPE_p_physx__PxFlagsT_physx__PxActorTypeFlag__Enum_uint16_t_t types, SWIGTYPE_p_p_physx__PxActor userBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getActors__SWIG_1(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxActorTypeFlag__Enum_uint16_t_t.getCPtr(types), SWIGTYPE_p_p_physx__PxActor.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxActiveTransform getActiveTransforms(SWIGTYPE_p_uint32_t nbTransformsOut, SWIGTYPE_p_uint8_t client) {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getActiveTransforms__SWIG_0(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(nbTransformsOut), SWIGTYPE_p_uint8_t.getCPtr(client));
    PxActiveTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxActiveTransform(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxActiveTransform getActiveTransforms(SWIGTYPE_p_uint32_t nbTransformsOut) {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getActiveTransforms__SWIG_1(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(nbTransformsOut));
    PxActiveTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxActiveTransform(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_p_physx__PxActor getActiveActors(SWIGTYPE_p_uint32_t nbActorsOut, SWIGTYPE_p_uint8_t client) {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getActiveActors__SWIG_0(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(nbActorsOut), SWIGTYPE_p_uint8_t.getCPtr(client));
    SWIGTYPE_p_p_physx__PxActor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_physx__PxActor(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_p_physx__PxActor getActiveActors(SWIGTYPE_p_uint32_t nbActorsOut) {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getActiveActors__SWIG_1(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(nbActorsOut));
    SWIGTYPE_p_p_physx__PxActor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_physx__PxActor(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbArticulations() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getNbArticulations(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getArticulations(SWIGTYPE_p_p_physx__PxArticulation userBuffer, SWIGTYPE_p_uint32_t bufferSize, SWIGTYPE_p_uint32_t startIndex) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getArticulations__SWIG_0(swigCPtr, SWIGTYPE_p_p_physx__PxArticulation.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize), SWIGTYPE_p_uint32_t.getCPtr(startIndex)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getArticulations(SWIGTYPE_p_p_physx__PxArticulation userBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getArticulations__SWIG_1(swigCPtr, SWIGTYPE_p_p_physx__PxArticulation.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbConstraints() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getNbConstraints(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getConstraints(SWIGTYPE_p_p_physx__PxConstraint userBuffer, SWIGTYPE_p_uint32_t bufferSize, SWIGTYPE_p_uint32_t startIndex) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getConstraints__SWIG_0(swigCPtr, SWIGTYPE_p_p_physx__PxConstraint.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize), SWIGTYPE_p_uint32_t.getCPtr(startIndex)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getConstraints(SWIGTYPE_p_p_physx__PxConstraint userBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getConstraints__SWIG_1(swigCPtr, SWIGTYPE_p_p_physx__PxConstraint.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbAggregates() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getNbAggregates(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getAggregates(SWIGTYPE_p_p_physx__PxAggregate userBuffer, SWIGTYPE_p_uint32_t bufferSize, SWIGTYPE_p_uint32_t startIndex) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getAggregates__SWIG_0(swigCPtr, SWIGTYPE_p_p_physx__PxAggregate.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize), SWIGTYPE_p_uint32_t.getCPtr(startIndex)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getAggregates(SWIGTYPE_p_p_physx__PxAggregate userBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getAggregates__SWIG_1(swigCPtr, SWIGTYPE_p_p_physx__PxAggregate.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setDominanceGroupPair(SWIGTYPE_p_uint8_t group1, SWIGTYPE_p_uint8_t group2, PxDominanceGroupPair dominance) {
    physxPINVOKE.PxScene_setDominanceGroupPair(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(group1), SWIGTYPE_p_uint8_t.getCPtr(group2), PxDominanceGroupPair.getCPtr(dominance));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxDominanceGroupPair getDominanceGroupPair(SWIGTYPE_p_uint8_t group1, SWIGTYPE_p_uint8_t group2) {
    PxDominanceGroupPair ret = new PxDominanceGroupPair(physxPINVOKE.PxScene_getDominanceGroupPair(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(group1), SWIGTYPE_p_uint8_t.getCPtr(group2)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_PxCpuDispatcher getCpuDispatcher() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getCpuDispatcher(swigCPtr);
    SWIGTYPE_p_PxCpuDispatcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_PxCpuDispatcher(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_PxGpuDispatcher getGpuDispatcher() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getGpuDispatcher(swigCPtr);
    SWIGTYPE_p_PxGpuDispatcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_PxGpuDispatcher(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_uint8_t createClient() {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(physxPINVOKE.PxScene_createClient(swigCPtr), true);
    return ret;
  }

  public virtual void setClientBehaviorFlags(SWIGTYPE_p_uint8_t client, SWIGTYPE_p_physx__PxFlagsT_physx__PxClientBehaviorFlag__Enum_uint8_t_t clientBehaviorFlags) {
    physxPINVOKE.PxScene_setClientBehaviorFlags(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(client), SWIGTYPE_p_physx__PxFlagsT_physx__PxClientBehaviorFlag__Enum_uint8_t_t.getCPtr(clientBehaviorFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_physx__PxFlagsT_physx__PxClientBehaviorFlag__Enum_uint8_t_t getClientBehaviorFlags(SWIGTYPE_p_uint8_t client) {
    SWIGTYPE_p_physx__PxFlagsT_physx__PxClientBehaviorFlag__Enum_uint8_t_t ret = new SWIGTYPE_p_physx__PxFlagsT_physx__PxClientBehaviorFlag__Enum_uint8_t_t(physxPINVOKE.PxScene_getClientBehaviorFlags(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(client)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setClothInterCollisionDistance(float distance) {
    physxPINVOKE.PxScene_setClothInterCollisionDistance(swigCPtr, distance);
  }

  public virtual float getClothInterCollisionDistance() {
    float ret = physxPINVOKE.PxScene_getClothInterCollisionDistance(swigCPtr);
    return ret;
  }

  public virtual void setClothInterCollisionStiffness(float stiffness) {
    physxPINVOKE.PxScene_setClothInterCollisionStiffness(swigCPtr, stiffness);
  }

  public virtual float getClothInterCollisionStiffness() {
    float ret = physxPINVOKE.PxScene_getClothInterCollisionStiffness(swigCPtr);
    return ret;
  }

  public virtual void setClothInterCollisionNbIterations(SWIGTYPE_p_uint32_t nbIterations) {
    physxPINVOKE.PxScene_setClothInterCollisionNbIterations(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(nbIterations));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getClothInterCollisionNbIterations() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getClothInterCollisionNbIterations(swigCPtr), true);
    return ret;
  }

  public virtual void setSimulationEventCallback(PxSimulationEventCallback callback, SWIGTYPE_p_uint8_t client) {
    physxPINVOKE.PxScene_setSimulationEventCallback__SWIG_0(swigCPtr, PxSimulationEventCallback.getCPtr(callback), SWIGTYPE_p_uint8_t.getCPtr(client));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setSimulationEventCallback(PxSimulationEventCallback callback) {
    physxPINVOKE.PxScene_setSimulationEventCallback__SWIG_1(swigCPtr, PxSimulationEventCallback.getCPtr(callback));
  }

  public virtual PxSimulationEventCallback getSimulationEventCallback(SWIGTYPE_p_uint8_t client) {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getSimulationEventCallback__SWIG_0(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(client));
    PxSimulationEventCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSimulationEventCallback(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxSimulationEventCallback getSimulationEventCallback() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getSimulationEventCallback__SWIG_1(swigCPtr);
    PxSimulationEventCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSimulationEventCallback(cPtr, false);
    return ret;
  }

  public virtual void setContactModifyCallback(PxContactModifyCallback callback) {
    physxPINVOKE.PxScene_setContactModifyCallback(swigCPtr, PxContactModifyCallback.getCPtr(callback));
  }

  public virtual void setCCDContactModifyCallback(PxCCDContactModifyCallback callback) {
    physxPINVOKE.PxScene_setCCDContactModifyCallback(swigCPtr, PxCCDContactModifyCallback.getCPtr(callback));
  }

  public virtual PxContactModifyCallback getContactModifyCallback() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getContactModifyCallback(swigCPtr);
    PxContactModifyCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxContactModifyCallback(cPtr, false);
    return ret;
  }

  public virtual PxCCDContactModifyCallback getCCDContactModifyCallback() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getCCDContactModifyCallback(swigCPtr);
    PxCCDContactModifyCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxCCDContactModifyCallback(cPtr, false);
    return ret;
  }

  public virtual void setBroadPhaseCallback(PxBroadPhaseCallback callback, SWIGTYPE_p_uint8_t client) {
    physxPINVOKE.PxScene_setBroadPhaseCallback__SWIG_0(swigCPtr, PxBroadPhaseCallback.getCPtr(callback), SWIGTYPE_p_uint8_t.getCPtr(client));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setBroadPhaseCallback(PxBroadPhaseCallback callback) {
    physxPINVOKE.PxScene_setBroadPhaseCallback__SWIG_1(swigCPtr, PxBroadPhaseCallback.getCPtr(callback));
  }

  public virtual PxBroadPhaseCallback getBroadPhaseCallback(SWIGTYPE_p_uint8_t client) {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getBroadPhaseCallback__SWIG_0(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(client));
    PxBroadPhaseCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxBroadPhaseCallback(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxBroadPhaseCallback getBroadPhaseCallback() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getBroadPhaseCallback__SWIG_1(swigCPtr);
    PxBroadPhaseCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxBroadPhaseCallback(cPtr, false);
    return ret;
  }

  public virtual void setFilterShaderData(SWIGTYPE_p_void data, SWIGTYPE_p_uint32_t dataSize) {
    physxPINVOKE.PxScene_setFilterShaderData(swigCPtr, SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_uint32_t.getCPtr(dataSize));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_void getFilterShaderData() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getFilterShaderData(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getFilterShaderDataSize() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getFilterShaderDataSize(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_f_uint32_t_physx__PxFilterData_uint32_t_physx__PxFilterData_r_physx__PxFlags__enum_physx__PxPairFlag__Enum_uint16_t___p_q_const__void_uint32_t__physx__PxFlagsT_physx__PxFilterFlag__Enum_uint16_t_t getFilterShader() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getFilterShader(swigCPtr);
    SWIGTYPE_p_f_uint32_t_physx__PxFilterData_uint32_t_physx__PxFilterData_r_physx__PxFlags__enum_physx__PxPairFlag__Enum_uint16_t___p_q_const__void_uint32_t__physx__PxFlagsT_physx__PxFilterFlag__Enum_uint16_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_uint32_t_physx__PxFilterData_uint32_t_physx__PxFilterData_r_physx__PxFlags__enum_physx__PxPairFlag__Enum_uint16_t___p_q_const__void_uint32_t__physx__PxFlagsT_physx__PxFilterFlag__Enum_uint16_t_t(cPtr, false);
    return ret;
  }

  public virtual PxSimulationFilterCallback getFilterCallback() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getFilterCallback(swigCPtr);
    PxSimulationFilterCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSimulationFilterCallback(cPtr, false);
    return ret;
  }

  public virtual void resetFiltering(PxActor actor) {
    physxPINVOKE.PxScene_resetFiltering__SWIG_0(swigCPtr, PxActor.getCPtr(actor));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void resetFiltering(PxRigidActor actor, SWIGTYPE_p_p_physx__PxShape shapes, SWIGTYPE_p_uint32_t shapeCount) {
    physxPINVOKE.PxScene_resetFiltering__SWIG_1(swigCPtr, PxRigidActor.getCPtr(actor), SWIGTYPE_p_p_physx__PxShape.getCPtr(shapes), SWIGTYPE_p_uint32_t.getCPtr(shapeCount));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void simulate(float elapsedTime, SWIGTYPE_p_physx__PxBaseTask completionTask, SWIGTYPE_p_void scratchMemBlock, SWIGTYPE_p_uint32_t scratchMemBlockSize, bool controlSimulation) {
    physxPINVOKE.PxScene_simulate__SWIG_0(swigCPtr, elapsedTime, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask), SWIGTYPE_p_void.getCPtr(scratchMemBlock), SWIGTYPE_p_uint32_t.getCPtr(scratchMemBlockSize), controlSimulation);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void simulate(float elapsedTime, SWIGTYPE_p_physx__PxBaseTask completionTask, SWIGTYPE_p_void scratchMemBlock, SWIGTYPE_p_uint32_t scratchMemBlockSize) {
    physxPINVOKE.PxScene_simulate__SWIG_1(swigCPtr, elapsedTime, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask), SWIGTYPE_p_void.getCPtr(scratchMemBlock), SWIGTYPE_p_uint32_t.getCPtr(scratchMemBlockSize));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void simulate(float elapsedTime, SWIGTYPE_p_physx__PxBaseTask completionTask, SWIGTYPE_p_void scratchMemBlock) {
    physxPINVOKE.PxScene_simulate__SWIG_2(swigCPtr, elapsedTime, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask), SWIGTYPE_p_void.getCPtr(scratchMemBlock));
  }

  public virtual void simulate(float elapsedTime, SWIGTYPE_p_physx__PxBaseTask completionTask) {
    physxPINVOKE.PxScene_simulate__SWIG_3(swigCPtr, elapsedTime, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask));
  }

  public virtual void simulate(float elapsedTime) {
    physxPINVOKE.PxScene_simulate__SWIG_4(swigCPtr, elapsedTime);
  }

  public virtual void advance(SWIGTYPE_p_physx__PxBaseTask completionTask) {
    physxPINVOKE.PxScene_advance__SWIG_0(swigCPtr, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask));
  }

  public virtual void advance() {
    physxPINVOKE.PxScene_advance__SWIG_1(swigCPtr);
  }

  public virtual void collide(float elapsedTime, SWIGTYPE_p_physx__PxBaseTask completionTask, SWIGTYPE_p_void scratchMemBlock, SWIGTYPE_p_uint32_t scratchMemBlockSize, bool controlSimulation) {
    physxPINVOKE.PxScene_collide__SWIG_0(swigCPtr, elapsedTime, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask), SWIGTYPE_p_void.getCPtr(scratchMemBlock), SWIGTYPE_p_uint32_t.getCPtr(scratchMemBlockSize), controlSimulation);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void collide(float elapsedTime, SWIGTYPE_p_physx__PxBaseTask completionTask, SWIGTYPE_p_void scratchMemBlock, SWIGTYPE_p_uint32_t scratchMemBlockSize) {
    physxPINVOKE.PxScene_collide__SWIG_1(swigCPtr, elapsedTime, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask), SWIGTYPE_p_void.getCPtr(scratchMemBlock), SWIGTYPE_p_uint32_t.getCPtr(scratchMemBlockSize));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void collide(float elapsedTime, SWIGTYPE_p_physx__PxBaseTask completionTask, SWIGTYPE_p_void scratchMemBlock) {
    physxPINVOKE.PxScene_collide__SWIG_2(swigCPtr, elapsedTime, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask), SWIGTYPE_p_void.getCPtr(scratchMemBlock));
  }

  public virtual void collide(float elapsedTime, SWIGTYPE_p_physx__PxBaseTask completionTask) {
    physxPINVOKE.PxScene_collide__SWIG_3(swigCPtr, elapsedTime, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask));
  }

  public virtual void collide(float elapsedTime) {
    physxPINVOKE.PxScene_collide__SWIG_4(swigCPtr, elapsedTime);
  }

  public virtual bool checkResults(bool block) {
    bool ret = physxPINVOKE.PxScene_checkResults__SWIG_0(swigCPtr, block);
    return ret;
  }

  public virtual bool checkResults() {
    bool ret = physxPINVOKE.PxScene_checkResults__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool fetchCollision(bool block) {
    bool ret = physxPINVOKE.PxScene_fetchCollision__SWIG_0(swigCPtr, block);
    return ret;
  }

  public virtual bool fetchCollision() {
    bool ret = physxPINVOKE.PxScene_fetchCollision__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool fetchResults(bool block, SWIGTYPE_p_uint32_t errorState) {
    bool ret = physxPINVOKE.PxScene_fetchResults__SWIG_0(swigCPtr, block, SWIGTYPE_p_uint32_t.getCPtr(errorState));
    return ret;
  }

  public virtual bool fetchResults(bool block) {
    bool ret = physxPINVOKE.PxScene_fetchResults__SWIG_1(swigCPtr, block);
    return ret;
  }

  public virtual bool fetchResults() {
    bool ret = physxPINVOKE.PxScene_fetchResults__SWIG_2(swigCPtr);
    return ret;
  }

  public virtual bool fetchResultsStart(SWIGTYPE_p_p_physx__PxContactPairHeader contactPairs, SWIGTYPE_p_uint32_t nbContactPairs, bool block) {
    bool ret = physxPINVOKE.PxScene_fetchResultsStart__SWIG_0(swigCPtr, SWIGTYPE_p_p_physx__PxContactPairHeader.getCPtr(contactPairs), SWIGTYPE_p_uint32_t.getCPtr(nbContactPairs), block);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool fetchResultsStart(SWIGTYPE_p_p_physx__PxContactPairHeader contactPairs, SWIGTYPE_p_uint32_t nbContactPairs) {
    bool ret = physxPINVOKE.PxScene_fetchResultsStart__SWIG_1(swigCPtr, SWIGTYPE_p_p_physx__PxContactPairHeader.getCPtr(contactPairs), SWIGTYPE_p_uint32_t.getCPtr(nbContactPairs));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void processCallbacks(SWIGTYPE_p_physx__PxBaseTask continuation) {
    physxPINVOKE.PxScene_processCallbacks(swigCPtr, SWIGTYPE_p_physx__PxBaseTask.getCPtr(continuation));
  }

  public virtual void fetchResultsFinish(SWIGTYPE_p_uint32_t errorState) {
    physxPINVOKE.PxScene_fetchResultsFinish__SWIG_0(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(errorState));
  }

  public virtual void fetchResultsFinish() {
    physxPINVOKE.PxScene_fetchResultsFinish__SWIG_1(swigCPtr);
  }

  public virtual void flushSimulation(bool sendPendingReports) {
    physxPINVOKE.PxScene_flushSimulation__SWIG_0(swigCPtr, sendPendingReports);
  }

  public virtual void flushSimulation() {
    physxPINVOKE.PxScene_flushSimulation__SWIG_1(swigCPtr);
  }

  public virtual void setGravity(PxVec3 vec) {
    physxPINVOKE.PxScene_setGravity(swigCPtr, PxVec3.getCPtr(vec));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxVec3 getGravity() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxScene_getGravity(swigCPtr), true);
    return ret;
  }

  public virtual void setBounceThresholdVelocity(float t) {
    physxPINVOKE.PxScene_setBounceThresholdVelocity(swigCPtr, t);
  }

  public virtual float getBounceThresholdVelocity() {
    float ret = physxPINVOKE.PxScene_getBounceThresholdVelocity(swigCPtr);
    return ret;
  }

  public virtual void setCCDMaxPasses(SWIGTYPE_p_uint32_t ccdMaxPasses) {
    physxPINVOKE.PxScene_setCCDMaxPasses(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(ccdMaxPasses));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getCCDMaxPasses() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getCCDMaxPasses(swigCPtr), true);
    return ret;
  }

  public virtual float getFrictionOffsetThreshold() {
    float ret = physxPINVOKE.PxScene_getFrictionOffsetThreshold(swigCPtr);
    return ret;
  }

  public virtual void setFrictionType(PxFrictionType.Enum frictionType) {
    physxPINVOKE.PxScene_setFrictionType(swigCPtr, (int)frictionType);
  }

  public virtual PxFrictionType.Enum getFrictionType() {
    PxFrictionType.Enum ret = (PxFrictionType.Enum)physxPINVOKE.PxScene_getFrictionType(swigCPtr);
    return ret;
  }

  public virtual bool setVisualizationParameter(PxVisualizationParameter.Enum param, float value) {
    bool ret = physxPINVOKE.PxScene_setVisualizationParameter(swigCPtr, (int)param, value);
    return ret;
  }

  public virtual float getVisualizationParameter(PxVisualizationParameter.Enum paramEnum) {
    float ret = physxPINVOKE.PxScene_getVisualizationParameter(swigCPtr, (int)paramEnum);
    return ret;
  }

  public virtual void setVisualizationCullingBox(PxBounds3 box) {
    physxPINVOKE.PxScene_setVisualizationCullingBox(swigCPtr, PxBounds3.getCPtr(box));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxBounds3 getVisualizationCullingBox() {
    PxBounds3 ret = new PxBounds3(physxPINVOKE.PxScene_getVisualizationCullingBox(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_physx__PxRenderBuffer getRenderBuffer() {
    SWIGTYPE_p_physx__PxRenderBuffer ret = new SWIGTYPE_p_physx__PxRenderBuffer(physxPINVOKE.PxScene_getRenderBuffer(swigCPtr), false);
    return ret;
  }

  public virtual void getSimulationStatistics(PxSimulationStatistics stats) {
    physxPINVOKE.PxScene_getSimulationStatistics(swigCPtr, PxSimulationStatistics.getCPtr(stats));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxPruningStructureType.Enum getStaticStructure() {
    PxPruningStructureType.Enum ret = (PxPruningStructureType.Enum)physxPINVOKE.PxScene_getStaticStructure(swigCPtr);
    return ret;
  }

  public virtual PxPruningStructureType.Enum getDynamicStructure() {
    PxPruningStructureType.Enum ret = (PxPruningStructureType.Enum)physxPINVOKE.PxScene_getDynamicStructure(swigCPtr);
    return ret;
  }

  public virtual void flushQueryUpdates() {
    physxPINVOKE.PxScene_flushQueryUpdates(swigCPtr);
  }

  public virtual PxBatchQuery createBatchQuery(PxBatchQueryDesc desc) {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_createBatchQuery(swigCPtr, PxBatchQueryDesc.getCPtr(desc));
    PxBatchQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxBatchQuery(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxVolumeCache createVolumeCache(SWIGTYPE_p_uint32_t maxStaticShapes, SWIGTYPE_p_uint32_t maxDynamicShapes) {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_createVolumeCache__SWIG_0(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(maxStaticShapes), SWIGTYPE_p_uint32_t.getCPtr(maxDynamicShapes));
    PxVolumeCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVolumeCache(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxVolumeCache createVolumeCache(SWIGTYPE_p_uint32_t maxStaticShapes) {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_createVolumeCache__SWIG_1(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(maxStaticShapes));
    PxVolumeCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVolumeCache(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PxVolumeCache createVolumeCache() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_createVolumeCache__SWIG_2(swigCPtr);
    PxVolumeCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVolumeCache(cPtr, false);
    return ret;
  }

  public virtual void setDynamicTreeRebuildRateHint(SWIGTYPE_p_uint32_t dynamicTreeRebuildRateHint) {
    physxPINVOKE.PxScene_setDynamicTreeRebuildRateHint(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(dynamicTreeRebuildRateHint));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getDynamicTreeRebuildRateHint() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getDynamicTreeRebuildRateHint(swigCPtr), true);
    return ret;
  }

  public virtual void forceDynamicTreeRebuild(bool rebuildStaticStructure, bool rebuildDynamicStructure) {
    physxPINVOKE.PxScene_forceDynamicTreeRebuild(swigCPtr, rebuildStaticStructure, rebuildDynamicStructure);
  }

  public virtual void setSceneQueryUpdateMode(PxSceneQueryUpdateMode.Enum updateMode) {
    physxPINVOKE.PxScene_setSceneQueryUpdateMode(swigCPtr, (int)updateMode);
  }

  public virtual PxSceneQueryUpdateMode.Enum getSceneQueryUpdateMode() {
    PxSceneQueryUpdateMode.Enum ret = (PxSceneQueryUpdateMode.Enum)physxPINVOKE.PxScene_getSceneQueryUpdateMode(swigCPtr);
    return ret;
  }

  public virtual void sceneQueriesUpdate(SWIGTYPE_p_physx__PxBaseTask completionTask, bool controlSimulation) {
    physxPINVOKE.PxScene_sceneQueriesUpdate__SWIG_0(swigCPtr, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask), controlSimulation);
  }

  public virtual void sceneQueriesUpdate(SWIGTYPE_p_physx__PxBaseTask completionTask) {
    physxPINVOKE.PxScene_sceneQueriesUpdate__SWIG_1(swigCPtr, SWIGTYPE_p_physx__PxBaseTask.getCPtr(completionTask));
  }

  public virtual void sceneQueriesUpdate() {
    physxPINVOKE.PxScene_sceneQueriesUpdate__SWIG_2(swigCPtr);
  }

  public virtual bool checkQueries(bool block) {
    bool ret = physxPINVOKE.PxScene_checkQueries__SWIG_0(swigCPtr, block);
    return ret;
  }

  public virtual bool checkQueries() {
    bool ret = physxPINVOKE.PxScene_checkQueries__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool fetchQueries(bool block) {
    bool ret = physxPINVOKE.PxScene_fetchQueries__SWIG_0(swigCPtr, block);
    return ret;
  }

  public virtual bool fetchQueries() {
    bool ret = physxPINVOKE.PxScene_fetchQueries__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, PxQueryFilterCallback filterCall, PxQueryCache cache) {
    bool ret = physxPINVOKE.PxScene_raycast__SWIG_0(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall), PxQueryCache.getCPtr(cache));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, PxQueryFilterCallback filterCall) {
    bool ret = physxPINVOKE.PxScene_raycast__SWIG_1(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData) {
    bool ret = physxPINVOKE.PxScene_raycast__SWIG_2(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags) {
    bool ret = physxPINVOKE.PxScene_raycast__SWIG_3(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t hitCall) {
    bool ret = physxPINVOKE.PxScene_raycast__SWIG_4(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxRaycastHit_t.getCPtr(hitCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(SWIGTYPE_p_PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, PxQueryFilterCallback filterCall, PxQueryCache cache, float inflation) {
    bool ret = physxPINVOKE.PxScene_sweep__SWIG_0(swigCPtr, SWIGTYPE_p_PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall), PxQueryCache.getCPtr(cache), inflation);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(SWIGTYPE_p_PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, PxQueryFilterCallback filterCall, PxQueryCache cache) {
    bool ret = physxPINVOKE.PxScene_sweep__SWIG_1(swigCPtr, SWIGTYPE_p_PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall), PxQueryCache.getCPtr(cache));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(SWIGTYPE_p_PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, PxQueryFilterCallback filterCall) {
    bool ret = physxPINVOKE.PxScene_sweep__SWIG_2(swigCPtr, SWIGTYPE_p_PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(SWIGTYPE_p_PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData) {
    bool ret = physxPINVOKE.PxScene_sweep__SWIG_3(swigCPtr, SWIGTYPE_p_PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(SWIGTYPE_p_PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags) {
    bool ret = physxPINVOKE.PxScene_sweep__SWIG_4(swigCPtr, SWIGTYPE_p_PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool sweep(SWIGTYPE_p_PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t hitCall) {
    bool ret = physxPINVOKE.PxScene_sweep__SWIG_5(swigCPtr, SWIGTYPE_p_PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxSweepHit_t.getCPtr(hitCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool overlap(SWIGTYPE_p_PxGeometry geometry, PxTransform pose, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t hitCall, PxQueryFilterData filterData, PxQueryFilterCallback filterCall) {
    bool ret = physxPINVOKE.PxScene_overlap__SWIG_0(swigCPtr, SWIGTYPE_p_PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t.getCPtr(hitCall), PxQueryFilterData.getCPtr(filterData), PxQueryFilterCallback.getCPtr(filterCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool overlap(SWIGTYPE_p_PxGeometry geometry, PxTransform pose, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t hitCall, PxQueryFilterData filterData) {
    bool ret = physxPINVOKE.PxScene_overlap__SWIG_1(swigCPtr, SWIGTYPE_p_PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t.getCPtr(hitCall), PxQueryFilterData.getCPtr(filterData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool overlap(SWIGTYPE_p_PxGeometry geometry, PxTransform pose, SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t hitCall) {
    bool ret = physxPINVOKE.PxScene_overlap__SWIG_2(swigCPtr, SWIGTYPE_p_PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_physx__PxHitCallbackT_physx__PxOverlapHit_t.getCPtr(hitCall));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getSceneQueryStaticTimestamp() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getSceneQueryStaticTimestamp(swigCPtr), true);
    return ret;
  }

  public virtual PxBroadPhaseType.Enum getBroadPhaseType() {
    PxBroadPhaseType.Enum ret = (PxBroadPhaseType.Enum)physxPINVOKE.PxScene_getBroadPhaseType(swigCPtr);
    return ret;
  }

  public virtual bool getBroadPhaseCaps(PxBroadPhaseCaps caps) {
    bool ret = physxPINVOKE.PxScene_getBroadPhaseCaps(swigCPtr, PxBroadPhaseCaps.getCPtr(caps));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getNbBroadPhaseRegions() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getNbBroadPhaseRegions(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getBroadPhaseRegions(PxBroadPhaseRegionInfo userBuffer, SWIGTYPE_p_uint32_t bufferSize, SWIGTYPE_p_uint32_t startIndex) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getBroadPhaseRegions__SWIG_0(swigCPtr, PxBroadPhaseRegionInfo.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize), SWIGTYPE_p_uint32_t.getCPtr(startIndex)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getBroadPhaseRegions(PxBroadPhaseRegionInfo userBuffer, SWIGTYPE_p_uint32_t bufferSize) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getBroadPhaseRegions__SWIG_1(swigCPtr, PxBroadPhaseRegionInfo.getCPtr(userBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t addBroadPhaseRegion(PxBroadPhaseRegion region, bool populateRegion) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_addBroadPhaseRegion__SWIG_0(swigCPtr, PxBroadPhaseRegion.getCPtr(region), populateRegion), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t addBroadPhaseRegion(PxBroadPhaseRegion region) {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_addBroadPhaseRegion__SWIG_1(swigCPtr, PxBroadPhaseRegion.getCPtr(region)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool removeBroadPhaseRegion(SWIGTYPE_p_uint32_t handle) {
    bool ret = physxPINVOKE.PxScene_removeBroadPhaseRegion(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(handle));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_PxTaskManager getTaskManager() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getTaskManager(swigCPtr);
    SWIGTYPE_p_PxTaskManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_PxTaskManager(cPtr, false);
    return ret;
  }

  public virtual void lockRead(string file, SWIGTYPE_p_uint32_t line) {
    physxPINVOKE.PxScene_lockRead__SWIG_0(swigCPtr, file, SWIGTYPE_p_uint32_t.getCPtr(line));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void lockRead(string file) {
    physxPINVOKE.PxScene_lockRead__SWIG_1(swigCPtr, file);
  }

  public virtual void lockRead() {
    physxPINVOKE.PxScene_lockRead__SWIG_2(swigCPtr);
  }

  public virtual void unlockRead() {
    physxPINVOKE.PxScene_unlockRead(swigCPtr);
  }

  public virtual void lockWrite(string file, SWIGTYPE_p_uint32_t line) {
    physxPINVOKE.PxScene_lockWrite__SWIG_0(swigCPtr, file, SWIGTYPE_p_uint32_t.getCPtr(line));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void lockWrite(string file) {
    physxPINVOKE.PxScene_lockWrite__SWIG_1(swigCPtr, file);
  }

  public virtual void lockWrite() {
    physxPINVOKE.PxScene_lockWrite__SWIG_2(swigCPtr);
  }

  public virtual void unlockWrite() {
    physxPINVOKE.PxScene_unlockWrite(swigCPtr);
  }

  public virtual void setNbContactDataBlocks(SWIGTYPE_p_uint32_t numBlocks) {
    physxPINVOKE.PxScene_setNbContactDataBlocks(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(numBlocks));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getNbContactDataBlocksUsed() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getNbContactDataBlocksUsed(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getMaxNbContactDataBlocksUsed() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getMaxNbContactDataBlocksUsed(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getContactReportStreamBufferSize() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getContactReportStreamBufferSize(swigCPtr), true);
    return ret;
  }

  public virtual void setSolverBatchSize(SWIGTYPE_p_uint32_t solverBatchSize) {
    physxPINVOKE.PxScene_setSolverBatchSize(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(solverBatchSize));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_uint32_t getSolverBatchSize() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxScene_getSolverBatchSize(swigCPtr), true);
    return ret;
  }

  public virtual float getWakeCounterResetValue() {
    float ret = physxPINVOKE.PxScene_getWakeCounterResetValue(swigCPtr);
    return ret;
  }

  public virtual void shiftOrigin(PxVec3 shift) {
    physxPINVOKE.PxScene_shiftOrigin(swigCPtr, PxVec3.getCPtr(shift));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_physx__PxPvdSceneClient getScenePvdClient() {
    global::System.IntPtr cPtr = physxPINVOKE.PxScene_getScenePvdClient(swigCPtr);
    SWIGTYPE_p_physx__PxPvdSceneClient ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxPvdSceneClient(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void userData {
    set {
      physxPINVOKE.PxScene_userData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxScene_userData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

}

}
