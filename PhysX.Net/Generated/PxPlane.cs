//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxPlane : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxPlane(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxPlane obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxPlane() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          physxPINVOKE.delete_PxPlane(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxPlane() : this(physxPINVOKE.new_PxPlane__SWIG_0(), true) {
  }

  public PxPlane(float nx, float ny, float nz, float distance) : this(physxPINVOKE.new_PxPlane__SWIG_1(nx, ny, nz, distance), true) {
  }

  public PxPlane(PxVec3 normal, float distance) : this(physxPINVOKE.new_PxPlane__SWIG_2(PxVec3.getCPtr(normal), distance), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public PxPlane(PxVec3 point, PxVec3 normal) : this(physxPINVOKE.new_PxPlane__SWIG_3(PxVec3.getCPtr(point), PxVec3.getCPtr(normal)), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public PxPlane(PxVec3 p0, PxVec3 p1, PxVec3 p2) : this(physxPINVOKE.new_PxPlane__SWIG_4(PxVec3.getCPtr(p0), PxVec3.getCPtr(p1), PxVec3.getCPtr(p2)), true) {
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public float distance(PxVec3 p) {
    float ret = physxPINVOKE.PxPlane_distance(swigCPtr, PxVec3.getCPtr(p));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(PxVec3 p) {
    bool ret = physxPINVOKE.PxPlane_contains(swigCPtr, PxVec3.getCPtr(p));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVec3 project(PxVec3 p) {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxPlane_project(swigCPtr, PxVec3.getCPtr(p)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVec3 pointInPlane() {
    PxVec3 ret = new PxVec3(physxPINVOKE.PxPlane_pointInPlane(swigCPtr), true);
    return ret;
  }

  public void normalize() {
    physxPINVOKE.PxPlane_normalize(swigCPtr);
  }

  public PxVec3 n {
    set {
      physxPINVOKE.PxPlane_n_set(swigCPtr, PxVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = physxPINVOKE.PxPlane_n_get(swigCPtr);
      PxVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxVec3(cPtr, false);
      return ret;
    } 
  }

  public float d {
    set {
      physxPINVOKE.PxPlane_d_set(swigCPtr, value);
    } 
    get {
      float ret = physxPINVOKE.PxPlane_d_get(swigCPtr);
      return ret;
    } 
  }

}

}
