//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class physx {
  public static PxAssertHandler PxGetAssertHandler() {
    PxAssertHandler ret = new PxAssertHandler(physxPINVOKE.PxGetAssertHandler(), false);
    return ret;
  }

  public static void PxSetAssertHandler(PxAssertHandler handler) {
    physxPINVOKE.PxSetAssertHandler(PxAssertHandler.getCPtr(handler));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public static float PxPi {
    get {
      float ret = physxPINVOKE.PxPi_get();
      return ret;
    } 
  }

  public static float PxHalfPi {
    get {
      float ret = physxPINVOKE.PxHalfPi_get();
      return ret;
    } 
  }

  public static float PxTwoPi {
    get {
      float ret = physxPINVOKE.PxTwoPi_get();
      return ret;
    } 
  }

  public static float PxInvPi {
    get {
      float ret = physxPINVOKE.PxInvPi_get();
      return ret;
    } 
  }

  public static float PxInvTwoPi {
    get {
      float ret = physxPINVOKE.PxInvTwoPi_get();
      return ret;
    } 
  }

  public static float PxPiDivTwo {
    get {
      float ret = physxPINVOKE.PxPiDivTwo_get();
      return ret;
    } 
  }

  public static float PxPiDivFour {
    get {
      float ret = physxPINVOKE.PxPiDivFour_get();
      return ret;
    } 
  }

  public static float PxAbs(float a) {
    float ret = physxPINVOKE.PxAbs__SWIG_0(a);
    return ret;
  }

  public static bool PxEquals(float a, float b, float eps) {
    bool ret = physxPINVOKE.PxEquals(a, b, eps);
    return ret;
  }

  public static double PxAbs(double a) {
    double ret = physxPINVOKE.PxAbs__SWIG_1(a);
    return ret;
  }

  public static SWIGTYPE_p_int32_t PxAbs(SWIGTYPE_p_int32_t a) {
    SWIGTYPE_p_int32_t ret = new SWIGTYPE_p_int32_t(physxPINVOKE.PxAbs__SWIG_2(SWIGTYPE_p_int32_t.getCPtr(a)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float PxSqrt(float a) {
    float ret = physxPINVOKE.PxSqrt__SWIG_0(a);
    return ret;
  }

  public static double PxSqrt(double a) {
    double ret = physxPINVOKE.PxSqrt__SWIG_1(a);
    return ret;
  }

  public static float PxRecipSqrt(float a) {
    float ret = physxPINVOKE.PxRecipSqrt__SWIG_0(a);
    return ret;
  }

  public static double PxRecipSqrt(double a) {
    double ret = physxPINVOKE.PxRecipSqrt__SWIG_1(a);
    return ret;
  }

  public static float PxSin(float a) {
    float ret = physxPINVOKE.PxSin__SWIG_0(a);
    return ret;
  }

  public static double PxSin(double a) {
    double ret = physxPINVOKE.PxSin__SWIG_1(a);
    return ret;
  }

  public static float PxCos(float a) {
    float ret = physxPINVOKE.PxCos__SWIG_0(a);
    return ret;
  }

  public static double PxCos(double a) {
    double ret = physxPINVOKE.PxCos__SWIG_1(a);
    return ret;
  }

  public static float PxTan(float a) {
    float ret = physxPINVOKE.PxTan__SWIG_0(a);
    return ret;
  }

  public static double PxTan(double a) {
    double ret = physxPINVOKE.PxTan__SWIG_1(a);
    return ret;
  }

  public static float PxAsin(float f) {
    float ret = physxPINVOKE.PxAsin__SWIG_0(f);
    return ret;
  }

  public static double PxAsin(double f) {
    double ret = physxPINVOKE.PxAsin__SWIG_1(f);
    return ret;
  }

  public static float PxAcos(float f) {
    float ret = physxPINVOKE.PxAcos__SWIG_0(f);
    return ret;
  }

  public static double PxAcos(double f) {
    double ret = physxPINVOKE.PxAcos__SWIG_1(f);
    return ret;
  }

  public static float PxAtan(float a) {
    float ret = physxPINVOKE.PxAtan__SWIG_0(a);
    return ret;
  }

  public static double PxAtan(double a) {
    double ret = physxPINVOKE.PxAtan__SWIG_1(a);
    return ret;
  }

  public static float PxAtan2(float x, float y) {
    float ret = physxPINVOKE.PxAtan2__SWIG_0(x, y);
    return ret;
  }

  public static double PxAtan2(double x, double y) {
    double ret = physxPINVOKE.PxAtan2__SWIG_1(x, y);
    return ret;
  }

  public static bool PxIsFinite(float f) {
    bool ret = physxPINVOKE.PxIsFinite__SWIG_0(f);
    return ret;
  }

  public static bool PxIsFinite(double f) {
    bool ret = physxPINVOKE.PxIsFinite__SWIG_1(f);
    return ret;
  }

  public static float PxFloor(float a) {
    float ret = physxPINVOKE.PxFloor(a);
    return ret;
  }

  public static float PxExp(float a) {
    float ret = physxPINVOKE.PxExp(a);
    return ret;
  }

  public static float PxCeil(float a) {
    float ret = physxPINVOKE.PxCeil(a);
    return ret;
  }

  public static float PxSign(float a) {
    float ret = physxPINVOKE.PxSign(a);
    return ret;
  }

  public static float PxPow(float x, float y) {
    float ret = physxPINVOKE.PxPow(x, y);
    return ret;
  }

  public static float PxLog(float x) {
    float ret = physxPINVOKE.PxLog(x);
    return ret;
  }

  public static SWIGTYPE_p_uint32_t INVALID_FILTER_PAIR_INDEX {
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.INVALID_FILTER_PAIR_INDEX_get(), true);
      return ret;
    } 
  }

  public static PxFilterObjectType.Enum PxGetFilterObjectType(SWIGTYPE_p_uint32_t attr) {
    PxFilterObjectType.Enum ret = (PxFilterObjectType.Enum)physxPINVOKE.PxGetFilterObjectType(SWIGTYPE_p_uint32_t.getCPtr(attr));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool PxFilterObjectIsKinematic(SWIGTYPE_p_uint32_t attr) {
    bool ret = physxPINVOKE.PxFilterObjectIsKinematic(SWIGTYPE_p_uint32_t.getCPtr(attr));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool PxFilterObjectIsTrigger(SWIGTYPE_p_uint32_t attr) {
    bool ret = physxPINVOKE.PxFilterObjectIsTrigger(SWIGTYPE_p_uint32_t.getCPtr(attr));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_uint8_t PX_DEFAULT_CLIENT {
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(physxPINVOKE.PX_DEFAULT_CLIENT_get(), true);
      return ret;
    } 
  }

  public static SWIGTYPE_p_uint8_t PX_MAX_CLIENTS {
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(physxPINVOKE.PX_MAX_CLIENTS_get(), true);
      return ret;
    } 
  }

  public static PxTransform PxTransformFromSegment(PxVec3 p0, PxVec3 p1, SWIGTYPE_p_float halfHeight) {
    PxTransform ret = new PxTransform(physxPINVOKE.PxTransformFromSegment__SWIG_0(PxVec3.getCPtr(p0), PxVec3.getCPtr(p1), SWIGTYPE_p_float.getCPtr(halfHeight)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PxTransform PxTransformFromSegment(PxVec3 p0, PxVec3 p1) {
    PxTransform ret = new PxTransform(physxPINVOKE.PxTransformFromSegment__SWIG_1(PxVec3.getCPtr(p0), PxVec3.getCPtr(p1)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PxTransform PxTransformFromPlaneEquation(PxPlane plane) {
    PxTransform ret = new PxTransform(physxPINVOKE.PxTransformFromPlaneEquation(PxPlane.getCPtr(plane)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PxPlane PxPlaneEquationFromTransform(PxTransform transform) {
    PxPlane ret = new PxPlane(physxPINVOKE.PxPlaneEquationFromTransform(PxTransform.getCPtr(transform)), true);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void PxRegisterArticulations(PxPhysics physics) {
    physxPINVOKE.PxRegisterArticulations(PxPhysics.getCPtr(physics));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxRegisterHeightFields(PxPhysics physics) {
    physxPINVOKE.PxRegisterHeightFields(PxPhysics.getCPtr(physics));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxRegisterLegacyHeightFields(PxPhysics physics) {
    physxPINVOKE.PxRegisterLegacyHeightFields(PxPhysics.getCPtr(physics));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxRegisterUnifiedHeightFields(PxPhysics physics) {
    physxPINVOKE.PxRegisterUnifiedHeightFields(PxPhysics.getCPtr(physics));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxRegisterCloth(PxPhysics physics) {
    physxPINVOKE.PxRegisterCloth(PxPhysics.getCPtr(physics));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PxRegisterParticles(PxPhysics physics) {
    physxPINVOKE.PxRegisterParticles(PxPhysics.getCPtr(physics));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public static PxPhysics PxCreateBasePhysics(SWIGTYPE_p_uint32_t version, SWIGTYPE_p_physx__PxFoundation foundation, PxTolerancesScale scale, bool trackOutstandingAllocations, SWIGTYPE_p_physx__PxPvd pvd) {
    global::System.IntPtr cPtr = physxPINVOKE.PxCreateBasePhysics(SWIGTYPE_p_uint32_t.getCPtr(version), SWIGTYPE_p_physx__PxFoundation.getCPtr(foundation), PxTolerancesScale.getCPtr(scale), trackOutstandingAllocations, SWIGTYPE_p_physx__PxPvd.getCPtr(pvd));
    PxPhysics ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxPhysics(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PxPhysics PxCreatePhysics(SWIGTYPE_p_uint32_t version, SWIGTYPE_p_physx__PxFoundation foundation, PxTolerancesScale scale, bool trackOutstandingAllocations, SWIGTYPE_p_physx__PxPvd pvd) {
    global::System.IntPtr cPtr = physxPINVOKE.PxCreatePhysics__SWIG_0(SWIGTYPE_p_uint32_t.getCPtr(version), SWIGTYPE_p_physx__PxFoundation.getCPtr(foundation), PxTolerancesScale.getCPtr(scale), trackOutstandingAllocations, SWIGTYPE_p_physx__PxPvd.getCPtr(pvd));
    PxPhysics ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxPhysics(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PxPhysics PxCreatePhysics(SWIGTYPE_p_uint32_t version, SWIGTYPE_p_physx__PxFoundation foundation, PxTolerancesScale scale, bool trackOutstandingAllocations) {
    global::System.IntPtr cPtr = physxPINVOKE.PxCreatePhysics__SWIG_1(SWIGTYPE_p_uint32_t.getCPtr(version), SWIGTYPE_p_physx__PxFoundation.getCPtr(foundation), PxTolerancesScale.getCPtr(scale), trackOutstandingAllocations);
    PxPhysics ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxPhysics(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PxPhysics PxCreatePhysics(SWIGTYPE_p_uint32_t version, SWIGTYPE_p_physx__PxFoundation foundation, PxTolerancesScale scale) {
    global::System.IntPtr cPtr = physxPINVOKE.PxCreatePhysics__SWIG_2(SWIGTYPE_p_uint32_t.getCPtr(version), SWIGTYPE_p_physx__PxFoundation.getCPtr(foundation), PxTolerancesScale.getCPtr(scale));
    PxPhysics ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxPhysics(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PxPhysics PxGetPhysics() {
    PxPhysics ret = new PxPhysics(physxPINVOKE.PxGetPhysics(), false);
    return ret;
  }

  public static SWIGTYPE_p_void PxMemZero(SWIGTYPE_p_void dest, SWIGTYPE_p_uint32_t count) {
    global::System.IntPtr cPtr = physxPINVOKE.PxMemZero(SWIGTYPE_p_void.getCPtr(dest), SWIGTYPE_p_uint32_t.getCPtr(count));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void PxMemSet(SWIGTYPE_p_void dest, SWIGTYPE_p_int32_t c, SWIGTYPE_p_uint32_t count) {
    global::System.IntPtr cPtr = physxPINVOKE.PxMemSet(SWIGTYPE_p_void.getCPtr(dest), SWIGTYPE_p_int32_t.getCPtr(c), SWIGTYPE_p_uint32_t.getCPtr(count));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void PxMemCopy(SWIGTYPE_p_void dest, SWIGTYPE_p_void src, SWIGTYPE_p_uint32_t count) {
    global::System.IntPtr cPtr = physxPINVOKE.PxMemCopy(SWIGTYPE_p_void.getCPtr(dest), SWIGTYPE_p_void.getCPtr(src), SWIGTYPE_p_uint32_t.getCPtr(count));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void PxMemMove(SWIGTYPE_p_void dest, SWIGTYPE_p_void src, SWIGTYPE_p_uint32_t count) {
    global::System.IntPtr cPtr = physxPINVOKE.PxMemMove(SWIGTYPE_p_void.getCPtr(dest), SWIGTYPE_p_void.getCPtr(src), SWIGTYPE_p_uint32_t.getCPtr(count));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_uint32_t PX_SPATIAL_INDEX_INVALID_ITEM_ID {
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PX_SPATIAL_INDEX_INVALID_ITEM_ID_get(), true);
      return ret;
    } 
  }

  public static PxSpatialIndex PxCreateSpatialIndex() {
    global::System.IntPtr cPtr = physxPINVOKE.PxCreateSpatialIndex();
    PxSpatialIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxSpatialIndex(cPtr, false);
    return ret;
  }

  public static readonly int PX_USE_PARTICLE_SYSTEM_API = physxPINVOKE.PX_USE_PARTICLE_SYSTEM_API_get();
  public static readonly int PX_USE_CLOTH_API = physxPINVOKE.PX_USE_CLOTH_API_get();
  public static readonly int PX_VC = physxPINVOKE.PX_VC_get();
  public static readonly int PX_LINUX = physxPINVOKE.PX_LINUX_get();
  public static readonly int PX_X64 = physxPINVOKE.PX_X64_get();
  public static readonly int PX_SSE2 = physxPINVOKE.PX_SSE2_get();
  public static readonly int PX_CLANG = physxPINVOKE.PX_CLANG_get();
  public static readonly int PX_GCC = physxPINVOKE.PX_GCC_get();
  public static readonly int PX_XBOXONE = physxPINVOKE.PX_XBOXONE_get();
  public static readonly int PX_WIN64 = physxPINVOKE.PX_WIN64_get();
  public static readonly int PX_WIN32 = physxPINVOKE.PX_WIN32_get();
  public static readonly int PX_ANDROID = physxPINVOKE.PX_ANDROID_get();
  public static readonly int PX_IOS = physxPINVOKE.PX_IOS_get();
  public static readonly int PX_OSX = physxPINVOKE.PX_OSX_get();
  public static readonly int PX_PS4 = physxPINVOKE.PX_PS4_get();
  public static readonly int PX_SWITCH = physxPINVOKE.PX_SWITCH_get();
  public static readonly int PX_X86 = physxPINVOKE.PX_X86_get();
  public static readonly int PX_A64 = physxPINVOKE.PX_A64_get();
  public static readonly int PX_ARM = physxPINVOKE.PX_ARM_get();
  public static readonly int PX_PPC = physxPINVOKE.PX_PPC_get();
  public static readonly int PX_NEON = physxPINVOKE.PX_NEON_get();
  public static readonly int PX_VMX = physxPINVOKE.PX_VMX_get();
  public static readonly int PX_DEBUG = physxPINVOKE.PX_DEBUG_get();
  public static readonly int PX_CHECKED = physxPINVOKE.PX_CHECKED_get();
  public static readonly int PX_PROFILE = physxPINVOKE.PX_PROFILE_get();
  public static readonly int PX_NVTX = physxPINVOKE.PX_NVTX_get();
  public static readonly int PX_DOXYGEN = physxPINVOKE.PX_DOXYGEN_get();
  public static readonly bool PX_GCC_FAMILY = physxPINVOKE.PX_GCC_FAMILY_get();
  public static readonly bool PX_WINDOWS_FAMILY = physxPINVOKE.PX_WINDOWS_FAMILY_get();
  public static readonly bool PX_MICROSOFT_FAMILY = physxPINVOKE.PX_MICROSOFT_FAMILY_get();
  public static readonly bool PX_LINUX_FAMILY = physxPINVOKE.PX_LINUX_FAMILY_get();
  public static readonly bool PX_APPLE_FAMILY = physxPINVOKE.PX_APPLE_FAMILY_get();
  public static readonly bool PX_UNIX_FAMILY = physxPINVOKE.PX_UNIX_FAMILY_get();
  public static readonly int PX_EMSCRIPTEN = physxPINVOKE.PX_EMSCRIPTEN_get();
  public static readonly bool PX_INTEL_FAMILY = physxPINVOKE.PX_INTEL_FAMILY_get();
  public static readonly bool PX_ARM_FAMILY = physxPINVOKE.PX_ARM_FAMILY_get();
  public static readonly bool PX_P64_FAMILY = physxPINVOKE.PX_P64_FAMILY_get();
  public static readonly int PX_LIBCPP = physxPINVOKE.PX_LIBCPP_get();
  public static readonly int PX_WINDOWS = physxPINVOKE.PX_WINDOWS_get();
  public static readonly int PX_ENABLE_ASSERTS = physxPINVOKE.PX_ENABLE_ASSERTS_get();
  public static readonly int PX_OFFSETOF_BASE = physxPINVOKE.PX_OFFSETOF_BASE_get();
  public static readonly bool PX_SUPPORT_GPU_PHYSX = physxPINVOKE.PX_SUPPORT_GPU_PHYSX_get();
  public static readonly int PX_SUPPORT_COMPUTE_PHYSX = physxPINVOKE.PX_SUPPORT_COMPUTE_PHYSX_get();
  public static readonly int PX_SUPPORT_EXTERN_TEMPLATE = physxPINVOKE.PX_SUPPORT_EXTERN_TEMPLATE_get();
  public static readonly string PX_PRIu64 = physxPINVOKE.PX_PRIu64_get();
  public static readonly double PX_MAX_F32 = physxPINVOKE.PX_MAX_F32_get();
  public static readonly double PX_MAX_REAL = physxPINVOKE.PX_MAX_REAL_get();
  public static readonly double PX_MAX_BOUNDS_EXTENTS = physxPINVOKE.PX_MAX_BOUNDS_EXTENTS_get();
  public static readonly double PX_MIN_HEIGHTFIELD_XZ_SCALE = physxPINVOKE.PX_MIN_HEIGHTFIELD_XZ_SCALE_get();
  public static readonly int PXC_CONTACT_NO_FACE_INDEX = physxPINVOKE.PXC_CONTACT_NO_FACE_INDEX_get();
}

}
