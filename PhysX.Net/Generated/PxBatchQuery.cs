//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxBatchQuery : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxBatchQuery(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxBatchQuery obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void execute() {
    physxPINVOKE.PxBatchQuery_execute(swigCPtr);
  }

  public virtual SWIGTYPE_p_f_physx__PxFilterData_physx__PxFilterData_p_q_const__void_physx__PxU32_r_physx__PxHitFlags__physx__PxQueryHitType__Enum getPreFilterShader() {
    global::System.IntPtr cPtr = physxPINVOKE.PxBatchQuery_getPreFilterShader(swigCPtr);
    SWIGTYPE_p_f_physx__PxFilterData_physx__PxFilterData_p_q_const__void_physx__PxU32_r_physx__PxHitFlags__physx__PxQueryHitType__Enum ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_physx__PxFilterData_physx__PxFilterData_p_q_const__void_physx__PxU32_r_physx__PxHitFlags__physx__PxQueryHitType__Enum(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_f_physx__PxFilterData_physx__PxFilterData_p_q_const__void_physx__PxU32_r_q_const__physx__PxQueryHit__physx__PxQueryHitType__Enum getPostFilterShader() {
    global::System.IntPtr cPtr = physxPINVOKE.PxBatchQuery_getPostFilterShader(swigCPtr);
    SWIGTYPE_p_f_physx__PxFilterData_physx__PxFilterData_p_q_const__void_physx__PxU32_r_q_const__physx__PxQueryHit__physx__PxQueryHitType__Enum ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_physx__PxFilterData_physx__PxFilterData_p_q_const__void_physx__PxU32_r_q_const__physx__PxQueryHit__physx__PxQueryHitType__Enum(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_void getFilterShaderData() {
    global::System.IntPtr cPtr = physxPINVOKE.PxBatchQuery_getFilterShaderData(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_uint32_t getFilterShaderDataSize() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(physxPINVOKE.PxBatchQuery_getFilterShaderDataSize(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_uint8_t getOwnerClient() {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(physxPINVOKE.PxBatchQuery_getOwnerClient(swigCPtr), true);
    return ret;
  }

  public virtual void setUserMemory(PxBatchQueryMemory arg0) {
    physxPINVOKE.PxBatchQuery_setUserMemory(swigCPtr, PxBatchQueryMemory.getCPtr(arg0));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PxBatchQueryMemory getUserMemory() {
    PxBatchQueryMemory ret = new PxBatchQueryMemory(physxPINVOKE.PxBatchQuery_getUserMemory(swigCPtr), false);
    return ret;
  }

  public virtual void release() {
    physxPINVOKE.PxBatchQuery_release(swigCPtr);
  }

  public virtual void raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, SWIGTYPE_p_void userData, PxQueryCache cache) {
    physxPINVOKE.PxBatchQuery_raycast__SWIG_0(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), SWIGTYPE_p_void.getCPtr(userData), PxQueryCache.getCPtr(cache));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, SWIGTYPE_p_void userData) {
    physxPINVOKE.PxBatchQuery_raycast__SWIG_1(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), SWIGTYPE_p_void.getCPtr(userData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData) {
    physxPINVOKE.PxBatchQuery_raycast__SWIG_2(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags) {
    physxPINVOKE.PxBatchQuery_raycast__SWIG_3(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void raycast(PxVec3 origin, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits) {
    physxPINVOKE.PxBatchQuery_raycast__SWIG_4(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void raycast(PxVec3 origin, PxVec3 unitDir, float distance) {
    physxPINVOKE.PxBatchQuery_raycast__SWIG_5(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir), distance);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void raycast(PxVec3 origin, PxVec3 unitDir) {
    physxPINVOKE.PxBatchQuery_raycast__SWIG_6(swigCPtr, PxVec3.getCPtr(origin), PxVec3.getCPtr(unitDir));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry, PxTransform pose, SWIGTYPE_p_uint16_t maxTouchHits, PxQueryFilterData filterData, SWIGTYPE_p_void userData, PxQueryCache cache) {
    physxPINVOKE.PxBatchQuery_overlap__SWIG_0(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), PxQueryFilterData.getCPtr(filterData), SWIGTYPE_p_void.getCPtr(userData), PxQueryCache.getCPtr(cache));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry, PxTransform pose, SWIGTYPE_p_uint16_t maxTouchHits, PxQueryFilterData filterData, SWIGTYPE_p_void userData) {
    physxPINVOKE.PxBatchQuery_overlap__SWIG_1(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), PxQueryFilterData.getCPtr(filterData), SWIGTYPE_p_void.getCPtr(userData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry, PxTransform pose, SWIGTYPE_p_uint16_t maxTouchHits, PxQueryFilterData filterData) {
    physxPINVOKE.PxBatchQuery_overlap__SWIG_2(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), PxQueryFilterData.getCPtr(filterData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry, PxTransform pose, SWIGTYPE_p_uint16_t maxTouchHits) {
    physxPINVOKE.PxBatchQuery_overlap__SWIG_3(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void overlap(PxGeometry geometry, PxTransform pose) {
    physxPINVOKE.PxBatchQuery_overlap__SWIG_4(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, SWIGTYPE_p_void userData, PxQueryCache cache, float inflation) {
    physxPINVOKE.PxBatchQuery_sweep__SWIG_0(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), SWIGTYPE_p_void.getCPtr(userData), PxQueryCache.getCPtr(cache), inflation);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, SWIGTYPE_p_void userData, PxQueryCache cache) {
    physxPINVOKE.PxBatchQuery_sweep__SWIG_1(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), SWIGTYPE_p_void.getCPtr(userData), PxQueryCache.getCPtr(cache));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData, SWIGTYPE_p_void userData) {
    physxPINVOKE.PxBatchQuery_sweep__SWIG_2(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData), SWIGTYPE_p_void.getCPtr(userData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags, PxQueryFilterData filterData) {
    physxPINVOKE.PxBatchQuery_sweep__SWIG_3(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags), PxQueryFilterData.getCPtr(filterData));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits, SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t hitFlags) {
    physxPINVOKE.PxBatchQuery_sweep__SWIG_4(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits), SWIGTYPE_p_physx__PxFlagsT_physx__PxHitFlag__Enum_uint16_t_t.getCPtr(hitFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance, SWIGTYPE_p_uint16_t maxTouchHits) {
    physxPINVOKE.PxBatchQuery_sweep__SWIG_5(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance, SWIGTYPE_p_uint16_t.getCPtr(maxTouchHits));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void sweep(PxGeometry geometry, PxTransform pose, PxVec3 unitDir, float distance) {
    physxPINVOKE.PxBatchQuery_sweep__SWIG_6(swigCPtr, PxGeometry.getCPtr(geometry), PxTransform.getCPtr(pose), PxVec3.getCPtr(unitDir), distance);
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
