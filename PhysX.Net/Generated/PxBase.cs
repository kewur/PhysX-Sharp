//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace PhysX.Net {

public class PxBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void release() {
    physxPINVOKE.PxBase_release(swigCPtr);
  }

  public virtual string getConcreteTypeName() {
    string ret = physxPINVOKE.PxBase_getConcreteTypeName(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_uint16_t getConcreteType() {
    SWIGTYPE_p_uint16_t ret = new SWIGTYPE_p_uint16_t(physxPINVOKE.PxBase_getConcreteType(swigCPtr), true);
    return ret;
  }

  public void setBaseFlag(PxBaseFlag.Enum flag, bool value) {
    physxPINVOKE.PxBase_setBaseFlag(swigCPtr, (int)flag, value);
  }

  public void setBaseFlags(SWIGTYPE_p_physx__PxFlagsT_physx__PxBaseFlag__Enum_uint16_t_t inFlags) {
    physxPINVOKE.PxBase_setBaseFlags(swigCPtr, SWIGTYPE_p_physx__PxFlagsT_physx__PxBaseFlag__Enum_uint16_t_t.getCPtr(inFlags));
    if (physxPINVOKE.SWIGPendingException.Pending) throw physxPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_physx__PxFlagsT_physx__PxBaseFlag__Enum_uint16_t_t getBaseFlags() {
    SWIGTYPE_p_physx__PxFlagsT_physx__PxBaseFlag__Enum_uint16_t_t ret = new SWIGTYPE_p_physx__PxFlagsT_physx__PxBaseFlag__Enum_uint16_t_t(physxPINVOKE.PxBase_getBaseFlags(swigCPtr), true);
    return ret;
  }

  public virtual bool isReleasable() {
    bool ret = physxPINVOKE.PxBase_isReleasable(swigCPtr);
    return ret;
  }

}

}
